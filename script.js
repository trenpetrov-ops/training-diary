// –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π Firebase SDK
import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import {
    getAuth,
    onAuthStateChanged,
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut
} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import { getFirestore, doc, addDoc, setDoc, updateDoc, deleteDoc, onSnapshot, collection } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";


// =================================================================
// ‚úÖ –í–ê–®–ê –†–ï–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø FIREBASE
// =================================================================
const firebaseConfig = {
    // –í–°–¢–ê–í–õ–ï–ù–´ –í–ê–®–ò –ö–õ–Æ–ß–ò:
    apiKey: "AIzaSyBRh4hOexYttvkts5AcOxi4bg3Yp7-2d90",
    authDomain: "training-diary-51f0f.firebaseapp.com",
    projectId: "training-diary-51f0f",
    storageBucket: "training-diary-51f0f.firebasestorage.app",
    messagingSenderId: "332026731208",
    appId: "1:332026731208:web:3fa953b94700d00349e3fd"
};
// –ò—Å–ø–æ–ª—å–∑—É–µ–º projectId –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã
const appId = firebaseConfig.projectId;
const initialAuthToken = null;
// =================================================================

if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
    console.error("Firebase config is missing. Please provide it for the app to work correctly.");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);
let userId = null;

// üî• –ù–û–í–û–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π Firebase
let programsUnsubscribe = () => {};
let journalUnsubscribe = () => {};
let clientsUnsubscribe = () => {};
let cyclesUnsubscribe = () => {};

// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú ---
let state = {
    currentMode: null,
    currentPage: 'modeSelect',
    previousPage: 'programs',

    cycles: [],
    selectedCycleId: null,
    programs: [],
    journal: [],
    clients: [],
    selectedClientId: null,
    selectedProgramIdForDetails: null,
    expandedExerciseId: null,
    editingSetId: null,

    // –ò–ó–ú–ï–ù–ï–ù–û: –î–≤–æ–π–Ω–æ–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞. '' - –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ. 'all' - –≤—Å–µ —Ü–∏–∫–ª—ã/–ø—Ä–æ–≥—Ä–∞–º–º—ã.
    selectedJournalCategory: '',
    selectedJournalProgram: '',
};

// =================================================================
// üåü –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: DEBOUNCE (–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ)
// =================================================================
function debounce(func, delay) {
    let timeout;
    return function(...args) {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), delay);
    };
}


function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast-message';
    toast.innerText = message;
    document.body.append(toast);

    setTimeout(() => {
        toast.classList.add('show');
    }, 100);

    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 500);
    }, 3000);
}

// üî• –ò–ó–ú–ï–ù–ï–ù–û: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Ç—Ä–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
function toggleAppVisibility(isAuthenticated) {
    const authScreen = document.getElementById('auth-screen');
    const modeSelectScreen = document.getElementById('mode-select-screen');
    const container = document.querySelector('.container');
    const bottomNav = document.querySelector('.navigation');

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤
    if (authScreen) authScreen.style.display = 'none';
    if (modeSelectScreen) modeSelectScreen.style.display = 'none';
    if (container) container.style.display = 'none';
    if (bottomNav) bottomNav.style.display = 'none';

    if (!isAuthenticated) {
        // 1. –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω -> –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Auth
        if (authScreen) authScreen.style.display = 'flex';
        state.currentPage = 'auth';
    } else if (isAuthenticated && state.currentMode === null) {
        // 2. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Ä–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω -> –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Mode Select
        if (modeSelectScreen) modeSelectScreen.style.display = 'flex';
        state.currentPage = 'modeSelect';
    } else {
        // 3. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω -> –ü–æ–∫–∞–∑—ã–≤–∞–µ–º App Container
        if (container) container.style.display = 'block';
        if (bottomNav) bottomNav.style.display = 'flex';
    }
}


// --- –§–£–ù–ö–¶–ò–ò FIREBASE ---

function getUserCyclesCollection() {
    if (state.currentMode === 'own') {
        return collection(db, `artifacts/${appId}/users/${userId}/cycles`);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        return collection(db, `artifacts/${appId}/users/${userId}/clients/${state.selectedClientId}/cycles`);
    }
    return collection(db, `artifacts/${appId}/users/${userId}/clients`);
}

function getUserProgramsCollection() {
    if (!state.selectedCycleId) {
        return collection(db, `artifacts/${appId}/users/${userId}/dummy`);
    }

    if (state.currentMode === 'own') {
        return collection(db, `artifacts/${appId}/users/${userId}/cycles/${state.selectedCycleId}/programs`);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        return collection(db, `artifacts/${appId}/users/${userId}/clients/${state.selectedClientId}/cycles/${state.selectedCycleId}/programs`);
    }
    return collection(db, `artifacts/${appId}/users/${userId}/dummy`);
}

function getClientsCollection() {
    return collection(db, `artifacts/${appId}/users/${userId}/clients`);
}

function getUserJournalCollection() {
    if (state.currentMode === 'own') {
        return collection(db, `artifacts/${appId}/users/${userId}/journal`);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        return collection(db, `artifacts/${appId}/users/${userId}/clients/${state.selectedClientId}/journal`);
    }
    return collection(db, `artifacts/${appId}/users/${userId}/journal_dummy`);
}


// --- –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê ---
function createElement(tag, classes, innerText = '') {
    const el = document.createElement(tag);
    if (classes) {
        el.className = classes;
    }
    el.innerText = innerText;
    return el;
}

// =================================================================
// üåü –†–ï–ù–î–ï–†: –ö–ù–û–ü–ö–ê –°–ú–ï–ù–´ –†–ï–ñ–ò–ú–ê
// =================================================================
function renderModeChangeButton(contentContainer) {
    const logoutWrapper = createElement('div', 'logout-wrapper');

    const changeModeBtn = createElement('button', 'btn change-mode-btn', '–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º');
    changeModeBtn.addEventListener('click', () => {
        state.currentMode = null;
        state.selectedClientId = null;
        state.selectedCycleId = null;
        state.selectedProgramIdForDetails = null;
        setupDynamicListeners(); // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        toggleAppVisibility(true); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    });

    const logoutBtn = createElement('button', 'btn back-btn logout-btn', '–í—ã—Ö–æ–¥');
    logoutBtn.addEventListener('click', async () => {
        try {
            await signOut(auth);
            state.currentMode = null; // –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.');
        }
    });

    logoutWrapper.append(changeModeBtn, logoutBtn);
    contentContainer.append(logoutWrapper);
}

// =================================================================
// üåü –õ–û–ì–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ö–õ–ò–ï–ù–¢–û–í (ClientList)
// =================================================================
function renderClientsPage() {
    const contentContainer = document.createElement('div');
    contentContainer.id = 'clients-content';
    contentContainer.className = 'clients-list-page';

    renderModeChangeButton(contentContainer);

    const header = createElement('h3', null, '–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏');
    contentContainer.append(header);


    const clientInputGroup = createElement('div', 'input-group');
    const clientInput = createElement('input', null);
    clientInput.placeholder = '–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞';
    const addClientBtn = createElement('button', 'btn btn-primary', '–î–æ–±–∞–≤–∏—Ç—å');
    clientInputGroup.append(clientInput, addClientBtn);
    contentContainer.append(clientInputGroup);

    addClientBtn.addEventListener('click', async () => {
        const name = clientInput.value.trim();
        if (name) {
            const newClient = {
                name: name,
                createdAt: Date.now()
            };
            try {
                await addDoc(getClientsCollection(), newClient);
                clientInput.value = '';
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:", error);
                showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firebase!');
            }
        }
    });

    const clientsList = createElement('div', 'clients-list list-section');

    if (state.clients.length === 0) {
        clientsList.append(createElement('div', 'muted', '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ!'));
    } else {
        state.clients.forEach(client => {
            const clientItem = createElement('div', 'list-item client-item');
            clientItem.dataset.id = client.id;

            clientItem.innerHTML = `<div>${client.name}</div>
                                     <div>
                                         <button class="btn delete-btn"><svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><title>Ios-trash-outline SVG Icon</title><path d="M400 113.3h-80v-20c0-16.2-13.1-29.3-29.3-29.3h-69.5C205.1 64 192 77.1 192 93.3v20h-80V128h21.1l23.6 290.7c0 16.2 13.1 29.3 29.3 29.3h141c16.2 0 29.3-13.1 29.3-29.3L379.6 128H400v-14.7zm-193.4-20c0-8.1 6.6-14.7 14.6-14.7h69.5c8.1 0 14.6 6.6 14.6 14.7v20h-98.7v-20zm135 324.6v.8c0 8.1-6.6 14.7-14.6 14.7H186c-8.1 0-14.6-6.6-14.6-14.7v-.8L147.7 128h217.2l-23.3 289.9z" fill="currentColor"/><path d="M249 160h14v241h-14z" fill="currentColor"/><path d="M320 160h-14.6l-10.7 241h14.6z" fill="currentColor"/><path d="M206.5 160H192l10.7 241h14.6z" fill="currentColor"/></svg></button>
                                     </div>`;

            const deleteBtn = clientItem.querySelector('.delete-btn');
            deleteBtn.addEventListener('click', async (e) => {
                e.stopPropagation();
                await deleteDoc(doc(getClientsCollection(), client.id));
                if (state.selectedClientId === client.id) {
                    state.selectedClientId = null;
                }
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Ü–∏–∫–ª–∞–º –∫–ª–∏–µ–Ω—Ç–∞
            clientItem.addEventListener('click', (e) => {
                if (!e.target.closest('.delete-btn')) {
                    state.selectedClientId = client.id;
                    state.currentPage = 'programs';
                    state.selectedCycleId = null;
                    state.selectedProgramIdForDetails = null;
                    state.expandedExerciseId = null;
                    state.editingSetId = null;

                    setupDynamicListeners();

                    render();
                }
            });

            clientsList.append(clientItem);
        });
    }

    contentContainer.append(clientsList);
    root.append(contentContainer);

}

// =================================================================
// üî• –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¶–ò–ö–õ–û–í
// =================================================================
function renderCyclesPage() {
    // –ï—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ 'personal' –∏ –∫–ª–∏–µ–Ω—Ç –Ω–µ –≤—ã–±—Ä–∞–Ω, —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤.
    if (state.currentMode === 'personal' && state.selectedClientId === null) {
        renderClientsPage();
        return;
    }

    const contentContainer = document.createElement('div');
    contentContainer.id = 'cycles-content';
    contentContainer.className = 'programs-list-page';

    // -----------------------------------------------------------
    // –ö–Ω–æ–ø–∫–∞ "–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º" –∏–ª–∏ "–ù–∞–∑–∞–¥" –∫ –∫–ª–∏–µ–Ω—Ç–∞–º
    // -----------------------------------------------------------
    if (state.currentMode === 'personal') {
        const backToClientsBtn = createElement('button', 'btn back-btn', '‚Üê –ö –∫–ª–∏–µ–Ω—Ç–∞–º');
        backToClientsBtn.addEventListener('click', () => {
            state.selectedClientId = null;
            state.currentPage = 'programs';
            state.selectedCycleId = null;
            setupDynamicListeners();
            render();
        });
        contentContainer.append(backToClientsBtn);
    } else {
        // –ï—Å–ª–∏ 'own' —Ä–µ–∂–∏–º, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Å–º–µ–Ω—ã —Ä–µ–∂–∏–º–∞
        renderModeChangeButton(contentContainer);
    }


    let headerText = state.currentMode === 'own' ? '–õ–∏—á–Ω—ã–µ —Ü–∏–∫–ª—ã' :
        `–¶–∏–∫–ª—ã –∫–ª–∏–µ–Ω—Ç–∞: ${state.clients.find(c => c.id === state.selectedClientId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
    const header = createElement('h3', null, headerText);
    contentContainer.append(header);


    // -----------------------------------------------------------
    // –ë–õ–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –¶–ò–ö–õ–ê
    // -----------------------------------------------------------
    const cycleInputGroup = createElement('div', 'input-group');
    const cycleInput = createElement('input', null);
    cycleInput.placeholder = '–ù–∞–∑–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞ (–ù–∞–±–æ—Ä –º–∞—Å—Å—ã, –°—É—à–∫–∞...)';
    const addCycleBtn = createElement('button', 'btn btn-primary', '–°–æ–∑–¥–∞—Ç—å —Ü–∏–∫–ª');
    cycleInputGroup.append(cycleInput, addCycleBtn);
    contentContainer.append(cycleInputGroup);

    addCycleBtn.addEventListener('click', async () => {
        const name = cycleInput.value.trim();
        if (name) {
            const newCycle = {
                name: name,
                startDate: Date.now(),
                startDateString: new Date().toLocaleDateString('ru-RU'),
            };
            try {
                await addDoc(getUserCyclesCollection(), newCycle);
                cycleInput.value = '';
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞:", error);
                showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firebase!');
            }
        }
    });

    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –¶–ò–ö–õ–û–í
    // -----------------------------------------------------------
    const cyclesList = createElement('div', 'programs-list list-section');

    if (state.cycles.length === 0) {
        cyclesList.append(createElement('div', 'muted', '–ù–µ—Ç —Ü–∏–∫–ª–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!'));
    } else {
        state.cycles.forEach(cycle => {
            const cycleItem = createElement('div', 'list-item program-item');
            cycleItem.dataset.id = cycle.id;

            cycleItem.innerHTML = `<div>${cycle.name} <small class="muted">(${cycle.startDateString})</small></div>
                                     <div>
                                         <button class="btn delete-btn "><svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><title>Ios-trash-outline SVG Icon</title><path d="M400 113.3h-80v-20c0-16.2-13.1-29.3-29.3-29.3h-69.5C205.1 64 192 77.1 192 93.3v20h-80V128h21.1l23.6 290.7c0 16.2 13.1 29.3 29.3 29.3h141c16.2 0 29.3-13.1 29.3-29.3L379.6 128H400v-14.7zm-193.4-20c0-8.1 6.6-14.7 14.6-14.7h69.5c8.1 0 14.6 6.6 14.6 14.7v20h-98.7v-20zm135 324.6v.8c0 8.1-6.6 14.7-14.6 14.7H186c-8.1 0-14.6-6.6-14.6-14.7v-.8L147.7 128h217.2l-23.3 289.9z" fill="currentColor"/><path d="M249 160h14v241h-14z" fill="currentColor"/><path d="M320 160h-14.6l-10.7 241h14.6z" fill="currentColor"/><path d="M206.5 160H192l10.7 241h14.6z" fill="currentColor"/></svg></button>
                                     </div>`;

            const deleteBtn = cycleItem.querySelector('.delete-btn');
            deleteBtn.addEventListener('click', async (e) => {
                e.stopPropagation();
                await deleteDoc(doc(getUserCyclesCollection(), cycle.id));
            });

            const clickHandler = () => {
                state.selectedCycleId = cycle.id;
                state.currentPage = 'programsInCycle';
                setupDynamicListeners();
                render();
            };



            cycleItem.addEventListener('click', (e) => {
                if (!e.target.closest('.delete-btn')) {
                    clickHandler();
                }
            });

            cyclesList.append(cycleItem);
        });
    }

    contentContainer.append(cyclesList);
    root.append(contentContainer);
}


// =================================================================
// üî• –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
// =================================================================
function renderProgramsInCyclePage() {
    const currentCycle = state.cycles.find(c => c.id === state.selectedCycleId);

    if (!currentCycle) {
        state.currentPage = 'programs';
        state.selectedCycleId = null;
        render();
        return;
    }

    const contentContainer = document.createElement('div');
    contentContainer.id = 'programs-content';
    contentContainer.className = 'programs-list-page';

    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ —Ü–∏–∫–ª–∞–º
    const backButtonText = state.currentMode === 'own' ? '‚Üê –ö —Ü–∏–∫–ª–∞–º' : `‚Üê –ö —Ü–∏–∫–ª–∞–º –∫–ª–∏–µ–Ω—Ç–∞`;
    const backButton = createElement('button', 'btn back-btn', backButtonText);

    backButton.addEventListener('click', () => {
        state.currentPage = 'programs';
        state.selectedProgramIdForDetails = null;
        render();
    });
    contentContainer.append(backButton);


    const header = createElement('h3', null, `${currentCycle.name}: –ü—Ä–æ–≥—Ä–∞–º–º—ã`);
    contentContainer.append(header);

    // -----------------------------------------------------------
    // –ë–õ–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –ü–†–û–ì–†–ê–ú–ú–´
    // -----------------------------------------------------------
    const programInputGroup = createElement('div', 'input-group');
    const programInput = createElement('input', null);
    programInput.placeholder = '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã (–ù–æ–≥–∏, –†—É–∫–∏...)';
    const addProgramBtn = createElement('button', 'btn btn-primary', '–°–æ–∑–¥–∞—Ç—å');
    programInputGroup.append(programInput, addProgramBtn);
    contentContainer.append(programInputGroup);

    addProgramBtn.addEventListener('click', async () => {
        const name = programInput.value.trim();
        if (name) {
            const newProgram = {
                name: name,
                exercises: [],
                trainingNote: '' // üî• –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø: –ü–æ–ª–µ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
            };
            try {
                await addDoc(getUserProgramsCollection(), newProgram);
                programInput.value = '';
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:", error);
                showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firebase!');
            }
        }
    });

    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –ü–†–û–ì–†–ê–ú–ú
    // -----------------------------------------------------------
    const programsList = createElement('div', 'programs-list list-section');

    if (state.programs.length === 0) {
        programsList.append(createElement('div', 'muted', '–ù–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é!'));
    } else {
        state.programs.forEach(program => {
            const programItem = createElement('div', 'list-item program-item');
            programItem.dataset.id = program.id;

            programItem.innerHTML = `<div>${program.name}</div>
                                     <div>
                                         <button class="btn delete-btn"><svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><title>Ios-trash-outline SVG Icon</title><path d="M400 113.3h-80v-20c0-16.2-13.1-29.3-29.3-29.3h-69.5C205.1 64 192 77.1 192 93.3v20h-80V128h21.1l23.6 290.7c0 16.2 13.1 29.3 29.3 29.3h141c16.2 0 29.3-13.1 29.3-29.3L379.6 128H400v-14.7zm-193.4-20c0-8.1 6.6-14.7 14.6-14.7h69.5c8.1 0 14.6 6.6 14.6 14.7v20h-98.7v-20zm135 324.6v.8c0 8.1-6.6 14.7-14.6 14.7H186c-8.1 0-14.6-6.6-14.6-14.7v-.8L147.7 128h217.2l-23.3 289.9z" fill="currentColor"/><path d="M249 160h14v241h-14z" fill="currentColor"/><path d="M320 160h-14.6l-10.7 241h14.6z" fill="currentColor"/><path d="M206.5 160H192l10.7 241h14.6z" fill="currentColor"/></svg></button>
                                     </div>`;

            const deleteBtn = programItem.querySelector('.delete-btn');
            deleteBtn.addEventListener('click', async (e) => {
                e.stopPropagation();
                await deleteDoc(doc(getUserProgramsCollection(), program.id));
                if (state.selectedProgramIdForDetails === program.id) {
                    state.selectedProgramIdForDetails = null;
                }
            });

            const clickHandler = () => {
                state.selectedProgramIdForDetails = program.id;
                state.currentPage = 'programDetails';
                state.expandedExerciseId = null;
                state.editingSetId = null;
                render();
            };

            programItem.addEventListener('click', (e) => {
                if (!e.target.closest('.delete-btn')) {
                    clickHandler();
                }
            });

            programsList.append(programItem);
        });
    }

    contentContainer.append(programsList);
    root.append(contentContainer);
}


// =================================================================
// üåü –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–ù–ò–í–ï–†–°–ê–õ–¨–ù–û–ï –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –î–õ–Ø –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í
// =================================================================

function openCommentModal(itemId, currentNote, title, saveCallback) {
    const modalId = `modal-comment-${itemId}`;
    let modal = document.getElementById(modalId);

    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—É—é –º–æ–¥–∞–ª–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if (modal) {
        modal.remove();
    }

    modal = createElement('div', 'modal-overlay', '');
    modal.id = modalId;

    const modalContent = createElement('div', 'modal-content');
    modalContent.innerHTML = `
        <h4 class="modal-title">${title}</h4>
        <textarea id="comment-input-${itemId}" class="comment-edit-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...">${currentNote || ''}</textarea>
        <div class="modal-controls">
            <button class="btn btn-secondary modal-cancel-btn">–û—Ç–º–µ–Ω–∞</button>
            <button class="btn btn-primary modal-save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        </div>
    `;

    modal.append(modalContent);
    document.body.append(modal);

    const closeModal = () => modal.classList.remove('active');

    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ (–¥–ª—è CSS –ø–µ—Ä–µ—Ö–æ–¥–∞)
    setTimeout(() => modal.classList.add('active'), 50);

    modal.querySelector('.modal-cancel-btn').addEventListener('click', () => {
        closeModal();
        setTimeout(() => modal.remove(), 300); // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    });

    modal.querySelector('.modal-save-btn').addEventListener('click', async () => {
        const newNote = modal.querySelector(`#comment-input-${itemId}`).value.trim();
        await saveCallback(newNote); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        closeModal();
        setTimeout(() => modal.remove(), 300);
    });
}


async function saveExerciseNote(programId, exerciseId, note) {
    const currentProgram = state.programs.find(p => p.id === programId);
    if (currentProgram) {
        const currentExercise = (currentProgram.exercises || []).find(ex => ex.id === exerciseId);
        if (currentExercise) {
            currentExercise.note = note;

            try {
                await updateDoc(doc(getUserProgramsCollection(), currentProgram.id), { exercises: currentProgram.exercises });
                showToast('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é:", error);
                showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.');
            }
        }
    }
}

async function saveTrainingNote(programId, note) {
    try {
        await updateDoc(doc(getUserProgramsCollection(), programId), { trainingNote: note });
        showToast('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:", error);
        showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.');
    }
}


// üöÄ –õ–û–ì–ò–ö–ê –î–õ–Ø –°–¢–†–ê–ù–ò–¶–´ –î–ï–¢–ê–õ–ï–ô –ü–†–û–ì–†–ê–ú–ú–´
const debouncedSaveSetData = debounce(async (programId, exerciseId, setIndex, field, value) => {
    const currentProgram = state.programs.find(p => p.id === programId);
    if (currentProgram) {
        const currentExercise = (currentProgram.exercises || []).find(ex => ex.id === exerciseId);
        if (currentExercise) {
            if (!currentExercise.sets) {
                currentExercise.sets = [];
            }
            currentExercise.sets[setIndex][field] = value;
            try {
                await updateDoc(doc(getUserProgramsCollection(), currentProgram.id), { exercises: currentProgram.exercises });
                // render() –∑–¥–µ—Å—å –Ω–µ –Ω—É–∂–µ–Ω, —Ç–∞–∫ –∫–∞–∫ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç Firebase listener
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏:", error);
            }
        }
    }
}, 1000);

function renderProgramDetailsPage() {
    const selectedProgram = state.programs.find(p => p.id === state.selectedProgramIdForDetails);

    if (!selectedProgram) {
        state.currentPage = 'programsInCycle';
        state.selectedProgramIdForDetails = null;
        render();
        return;
    }

    const contentContainer = document.createElement('div');
    contentContainer.id = 'program-details-content';
    contentContainer.className = 'program-details-page';

    const backButtonText = '‚Üê –ö –ø—Ä–æ–≥—Ä–∞–º–º–∞–º —Ü–∏–∫–ª–∞';
    const backButton = createElement('button', 'btn back-btn', backButtonText);

    backButton.addEventListener('click', () => {
        state.currentPage = 'programsInCycle';
        state.selectedProgramIdForDetails = null;
        render();
    });
    contentContainer.append(backButton);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Ä–µ–∂–∏–º–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (—Å–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞)
    contentContainer.addEventListener('click', (e) => {
        if (!e.target.closest('.set-row') && state.editingSetId !== null) {
            state.editingSetId = null;
            render();
        }
    });

    contentContainer.append(createElement('h3', null, selectedProgram.name));

    // -----------------------------------------------------------
    // –ë–õ–û–ö –î–û–ë–ê–í–õ–ï–ù–ò–Ø –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø
    // -----------------------------------------------------------
    const exerciseInputGroup = createElement('div', 'input-group exercise-input-group');
    const exerciseInput = createElement('input', null);
    exerciseInput.placeholder = '–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è';
    const addExerciseBtn = createElement('button', 'btn btn-primary', '–î–æ–±–∞–≤–∏—Ç—å');
    exerciseInputGroup.append(exerciseInput, addExerciseBtn);
    contentContainer.append(exerciseInputGroup);

    addExerciseBtn.addEventListener('click', async () => {
        const name = exerciseInput.value.trim();
        if (name) {
            const newExercise = {
                id: Date.now().toString(),
                name: name,
                sets: [{ weight: '', reps: '' }],
                note: ''
            };
            const currentProgram = state.programs.find(p => p.id === state.selectedProgramIdForDetails);
            if (currentProgram) {
                if (!currentProgram.exercises) {
                    currentProgram.exercises = [];
                }
                currentProgram.exercises.push(newExercise);
                exerciseInput.value = '';
                state.expandedExerciseId = newExercise.id;
                state.editingSetId = null;
                await updateDoc(doc(getUserProgramsCollection(), currentProgram.id), { exercises: currentProgram.exercises });
            }
        }
    });

    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô
    // -----------------------------------------------------------
    if (!selectedProgram.exercises || selectedProgram.exercises.length === 0) {
        contentContainer.append(createElement('div', 'muted', '–ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ!'));
    } else {
        const exercisesListSection = createElement('div', 'list-section');
        selectedProgram.exercises.forEach((exercise, index) => {
            const isExpanded = state.expandedExerciseId === exercise.id;
            const hasNote = exercise.note && exercise.note.trim() !== '';

            const exerciseItem = createElement('div', 'exercise-item');

            const exerciseHeader = createElement('div', `exercise-header ${isExpanded ? 'expanded' : ''}`);

            const exerciseTitle = createElement('div', 'exercise-title');
            const exerciseNumber = createElement('span', 'exercise-number', `${index + 1}.`);
            const exerciseName = createElement('span', 'exercise-name', exercise.name);

            exerciseTitle.append(exerciseNumber, exerciseName);

            const controlButtons = createElement('div', 'control-buttons');

            // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
            const editNoteBtn = createElement('button', `btn edit-note-btn ${hasNote ? 'has-note' : ''}`);
            editNoteBtn.innerHTML = ' <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24"><title>Edit SVG Icon</title><path fill="currentColor" d="M3.548 20.938h16.9a.5.5 0 0 0 0-1h-16.9a.5.5 0 0 0 0 1M9.71 17.18a2.587 2.587 0 0 0 1.12-.65l9.54-9.54a1.75 1.75 0 0 0 0-2.47l-.94-.93a1.788 1.788 0 0 0-2.47 0l-9.54 9.53a2.473 2.473 0 0 0-.64 1.12L6.04 17a.737.737 0 0 0 .19.72a.767.767 0 0 0 .53.22Zm.41-1.36a1.468 1.468 0 0 1-.67.39l-.97.26l-1-1l.26-.97a1.521 1.521 0 0 1 .39-.67l.38-.37l1.99 1.99Zm1.09-1.08l-1.99-1.99l6.73-6.73l1.99 1.99Zm8.45-8.45L18.65 7.3l-1.99-1.99l1.01-1.02a.748.748 0 0 1 1.06 0l.93.94a.754.754 0 0 1 0 1.06"/></svg>';
            editNoteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
                openCommentModal(
                    exercise.id,
                    exercise.note,
                    `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ ${exercise.name}`,
                    (newNote) => saveExerciseNote(selectedProgram.id, exercise.id, newNote)
                );
            });


            const deleteExerciseBtn = createElement('button', 'btn delete-exercise-btn');
            deleteExerciseBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><title>Ios-trash-outline SVG Icon</title><path d="M400 113.3h-80v-20c0-16.2-13.1-29.3-29.3-29.3h-69.5C205.1 64 192 77.1 192 93.3v20h-80V128h21.1l23.6 290.7c0 16.2 13.1 29.3 29.3 29.3h141c16.2 0 29.3-13.1 29.3-29.3L379.6 128H400v-14.7zm-193.4-20c0-8.1 6.6-14.7 14.6-14.7h69.5c8.1 0 14.6 6.6 14.6 14.7v20h-98.7v-20zm135 324.6v.8c0 8.1-6.6 14.7-14.6 14.7H186c-8.1 0-14.6-6.6-14.6-14.7v-.8L147.7 128h217.2l-23.3 289.9z" fill="currentColor"/><path d="M249 160h14v241h-14z" fill="currentColor"/><path d="M320 160h-14.6l-10.7 241h14.6z" fill="currentColor"/><path d="M206.5 160H192l10.7 241h14.6z" fill="currentColor"/></svg>';

            controlButtons.append(editNoteBtn, deleteExerciseBtn);
            exerciseHeader.append(exerciseTitle, controlButtons);

            deleteExerciseBtn.addEventListener('click', async (e) => {
                e.stopPropagation();
                const currentProgram = state.programs.find(p => p.id === state.selectedProgramIdForDetails);
                if (currentProgram) {
                    currentProgram.exercises = (currentProgram.exercises || []).filter(ex => ex.id !== exercise.id);
                    state.expandedExerciseId = null;
                    state.editingSetId = null;
                    await updateDoc(doc(getUserProgramsCollection(), currentProgram.id), { exercises: currentProgram.exercises });
                }
            });

            const setsContainer = createElement('div', `sets-container ${isExpanded ? 'expanded' : ''}`);

            // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ–¥—Ö–æ–¥–∞–º–∏
            const exerciseNoteContainer = createElement('div', 'exercise-note-display');
            if (hasNote) {
                const noteText = createElement('p', 'comment-text', exercise.note);
                exerciseNoteContainer.append(noteText);
            }


            const summarySetsContainer = createElement('div', `summary-sets-container ${!isExpanded ? 'visible' : ''}`);
            const summarySets = (exercise.sets || []).filter(set => (set.weight && set.weight.trim() !== '') || (set.reps && set.reps.trim() !== ''));
            if (summarySets.length > 0) {
                summarySets.forEach((set, setIndex) => {
                    const summarySpan = createElement('span', null, `${set.weight || '0'}x${set.reps || '0'}`);
                    summarySetsContainer.append(summarySpan);
                });
            }

            exerciseHeader.addEventListener('click', () => {
                if (state.expandedExerciseId === exercise.id) {
                    state.expandedExerciseId = null;
                } else {
                    state.expandedExerciseId = exercise.id;
                }
                state.editingSetId = null;
                render();
            });

            if (Array.isArray(exercise.sets)) {
                exercise.sets.forEach((set, setIndex) => {
                    const setId = `${exercise.id}-${setIndex}`;
                    const isEditing = state.editingSetId === setId;

                    const setRow = createElement('div', `set-row ${isEditing ? 'editing' : ''}`);
                    const setNumberLabel = createElement('span', 'set-label', `${setIndex + 1}.`);
                    setRow.append(setNumberLabel);

                    const inputGroup = createElement('div', 'set-input-group');
                    const weightInput = createElement('input', 'weight-input');
                    weightInput.type = 'number';
                    weightInput.placeholder = '–í–µ—Å';
                    weightInput.value = set.weight;

                    const repsInput = createElement('input', 'reps-input');
                    repsInput.type = 'number';
                    repsInput.placeholder = '–ü–æ–≤';
                    repsInput.value = set.reps;

                    inputGroup.append(weightInput, repsInput);
                    setRow.append(inputGroup);


                    const setText = createElement('span', 'set-display');
                    const displayWeight = set.weight || '...';
                    const displayReps = set.reps || '...';

                    setText.innerHTML = `
                        ${displayWeight} <small class="unit-label">–∫–≥</small> x 
                        ${displayReps} <small class="unit-label">–ø–æ–≤</small>
                    `;
                    setRow.append(setText);

                    setRow.addEventListener('click', (e) => {
                        e.stopPropagation();
                        state.editingSetId = setId;
                        render();
                    });

                    weightInput.addEventListener('click', (e) => e.stopPropagation());
                    repsInput.addEventListener('click', (e) => e.stopPropagation());

                    weightInput.addEventListener('input', (e) => {
                        debouncedSaveSetData(selectedProgram.id, exercise.id, setIndex, 'weight', e.target.value);
                    });
                    repsInput.addEventListener('input', (e) => {
                        debouncedSaveSetData(selectedProgram.id, exercise.id, setIndex, 'reps', e.target.value);
                    });

                    const deleteSetBtn = createElement('button', 'btn delete-set-row-btn', '-');

                    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∞/—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
                    deleteSetBtn.addEventListener('click', async (e) => {
                        e.stopPropagation();
                        const currentProgram = state.programs.find(p => p.id === state.selectedProgramIdForDetails);
                        if (currentProgram) {
                            const currentExercise = (currentProgram.exercises || []).find(ex => ex.id === exercise.id);
                            if (currentExercise) {

                                if (currentExercise.sets.length === 1) {
                                    // üî• –ù–û–í–û–ï –ü–†–ê–í–ò–õ–û: –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ–¥—Ö–æ–¥, —É–¥–∞–ª—è–µ–º –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
                                    currentProgram.exercises = currentProgram.exercises.filter(ex => ex.id !== exercise.id);
                                    showToast('–£–¥–∞–ª–µ–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–µ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ!');
                                } else {
                                    // –ò–Ω–∞—á–µ, –ø—Ä–æ—Å—Ç–æ —É–¥–∞–ª—è–µ–º –ø–æ–¥—Ö–æ–¥
                                    currentExercise.sets.splice(setIndex, 1);
                                    showToast('–ü–æ–¥—Ö–æ–¥ —É–¥–∞–ª–µ–Ω!');
                                }

                                state.editingSetId = null;
                                await updateDoc(doc(getUserProgramsCollection(), currentProgram.id), {
                                    exercises: currentProgram.exercises
                                });
                            }
                        }
                    });

                    setRow.append(deleteSetBtn);
                    setsContainer.append(setRow);
                });
            }

            const addSetBtn = createElement('button', 'add-set-btn', '+');
            addSetBtn.addEventListener('click', async (e) => {
                e.stopPropagation();
                const currentProgram = state.programs.find(p => p.id === state.selectedProgramIdForDetails);
                if (currentProgram) {
                    const currentExercise = (currentProgram.exercises || []).find(ex => ex.id === exercise.id);
                    if (currentExercise) {
                        if (!currentExercise.sets) {
                            currentExercise.sets = [];
                        }
                        const newSetIndex = currentExercise.sets.length;
                        currentExercise.sets.push({ weight: '', reps: '' });
                        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —Ç–æ–ª—å–∫–æ —á—Ç–æ —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥
                        state.editingSetId = `${exercise.id}-${newSetIndex}`;
                        await updateDoc(doc(getUserProgramsCollection(), currentProgram.id), { exercises: currentProgram.exercises });
                    }
                }
            });
            setsContainer.append(addSetBtn);

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ
            if (isExpanded) {
                setsContainer.append(exerciseNoteContainer);
            }

            exerciseItem.append(exerciseHeader, summarySetsContainer);

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ —Å–≤–µ—Ä–Ω—É—Ç–æ–º –≤–∏–¥–µ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if (!isExpanded && hasNote) {
                exerciseItem.append(exerciseNoteContainer);
            }

            exerciseItem.append(setsContainer);
            exercisesListSection.append(exerciseItem);
        });
        contentContainer.append(exercisesListSection);
    }

    // -----------------------------------------------------------
    // üî• –ë–õ–û–ö –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ï–í –ö –¢–†–ï–ù–ò–†–û–í–ö–ï (–ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û)
    // -----------------------------------------------------------
    const hasTrainingNote = selectedProgram.trainingNote && selectedProgram.trainingNote.trim() !== '';

    const commentWrapper = createElement('div', 'comment-wrapper');
    const commentBtn = createElement('button', `btn comment-toggle-btn ${hasTrainingNote ? 'has-note' : ''}`, `‚úèÔ∏è ${hasTrainingNote ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}`);

    // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if (hasTrainingNote) {
        const noteDisplay = createElement('p', 'comment-text-display', selectedProgram.trainingNote);
        commentWrapper.append(noteDisplay);
    }


    commentBtn.addEventListener('click', () => {
        // –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–ª—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        openCommentModal(
            selectedProgram.id,
            selectedProgram.trainingNote,
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ',
            (newNote) => saveTrainingNote(selectedProgram.id, newNote)
        );
    });

    commentWrapper.prepend(commentBtn); // –ö–Ω–æ–ø–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–≤–µ—Ä—Ö—É
    contentContainer.append(commentWrapper);


    // -----------------------------------------------------------
    // –ö–ù–û–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¢–†–ï–ù–ò–†–û–í–ö–ò
    // -----------------------------------------------------------
    const completeTrainingBtn = createElement('button', 'btn complete-training-btn', '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É');
    contentContainer.append(completeTrainingBtn);

    completeTrainingBtn.addEventListener('click', async () => {
        // –¢–µ–ø–µ—Ä—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±–µ—Ä–µ–º –ø—Ä—è–º–æ –∏–∑ selectedProgram (–æ–Ω —É–∂–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω)
        const trainingComment = selectedProgram.trainingNote || '';
        const currentCycle = state.cycles.find(c => c.id === state.selectedCycleId);

        // 1. –§–∏–ª—å—Ç—Ä—É–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ —Ç–µ, –≥–¥–µ –µ—Å—Ç—å –ø–æ–¥—Ö–æ–¥—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –ò–õ–ò –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
        const exercisesToSave = selectedProgram.exercises
            .filter(ex => ex.note || (ex.sets && ex.sets.some(set => set.weight || set.reps)))
            .map(ex => ({
                ...ex,
                note: ex.note || '',
                sets: (ex.sets || []).map(set => ({
                    weight: set.weight || '',
                    reps: set.reps || '',
                    note: set.note || ''
                }))
            }));

        if (exercisesToSave.length === 0 && trainingComment === '') {
            showToast('–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å: –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ/—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º!');
            return;
        }

        const trainingRecord = {
            date: new Date().toLocaleDateString('ru-RU'),
            time: new Date().toLocaleTimeString('ru-RU'),
            programName: selectedProgram.name,
            category: currentCycle ? currentCycle.name : selectedProgram.name,
            cycleName: currentCycle ? currentCycle.name : '–ë–µ–∑ —Ü–∏–∫–ª–∞',
            comment: trainingComment, // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π trainingNote
            exercises: exercisesToSave
        };

        try {
            await addDoc(getUserJournalCollection(), trainingRecord);
            showToast('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ!');

            // –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –ø—Ä–æ–≥—Ä–∞–º–º —Ü–∏–∫–ª–∞
            state.currentPage = 'programsInCycle';
            state.selectedProgramIdForDetails = null;
            state.expandedExerciseId = null;
            render();

        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", error);
            showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞.');
        }
    });

    root.append(contentContainer);
}


// =================================================================
// üåü –õ–û–ì–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –î–ù–ï–í–ù–ò–ö–ê (–° –î–í–û–ô–ù–´–ú –§–ò–õ–¨–¢–†–û–ú)
// =================================================================
function renderJournalPage() {
    const contentContainer = document.createElement('div');
    contentContainer.id = 'journal-content';
    contentContainer.className = 'journal-page';

    if (state.currentMode === 'own' || (state.currentMode === 'personal' && state.selectedClientId === null)) {
        renderModeChangeButton(contentContainer);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        const backToClientsBtn = createElement('button', 'btn back-btn', '‚Üê –ö —Ü–∏–∫–ª–∞–º');
        backToClientsBtn.addEventListener('click', () => {
            state.currentPage = 'programs';
            state.selectedProgramIdForDetails = null;
            render();
        });
        contentContainer.append(backToClientsBtn);
    }


    const header = createElement('h3', null, '–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    contentContainer.append(header);

    // -----------------------------------------------------------
    // –§–ò–õ–¨–¢–† 1: –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú (–¶–ò–ö–õ–ê–ú)
    // -----------------------------------------------------------
    const allCategories = [...new Set(state.journal.map(record => record.cycleName || '–ë–µ–∑ —Ü–∏–∫–ª–∞'))];
    const categoryFilter = createElement('div', 'category-filter');

    const createFilterButton = (name, value) => {
        const btn = createElement('button', `filter-btn ${state.selectedJournalCategory === value ? 'active' : ''}`, name);
        btn.addEventListener('click', () => {
            const newCategory = state.selectedJournalCategory === value ? '' : value;
            if (newCategory !== state.selectedJournalCategory) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ü–∏–∫–ª–∞
                state.selectedJournalProgram = '';
            }
            state.selectedJournalCategory = newCategory;
            render();
        });
        return btn;
    };

    // –ö–Ω–æ–ø–∫–∞ "–í—Å–µ —Ü–∏–∫–ª—ã" –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
    allCategories.forEach(category => {
        categoryFilter.append(createFilterButton(category, category));
    });
    contentContainer.append(categoryFilter);

    // -----------------------------------------------------------
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    // -----------------------------------------------------------
    if (!state.selectedJournalCategory) {
        contentContainer.append(createElement('div', 'muted', '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏.'));
        root.append(contentContainer);
        return;
    }


    // -----------------------------------------------------------
    // –§–ò–õ–¨–¢–† 2: –ü–û –ü–†–û–ì–†–ê–ú–ú–ê–ú (–í–ù–£–¢–†–ò –í–´–ë–†–ê–ù–ù–û–ì–û –¶–ò–ö–õ–ê)
    // -----------------------------------------------------------
    let programsInSelectedCycle = [];
    if (state.selectedJournalCategory === 'all') {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ '–í—Å–µ —Ü–∏–∫–ª—ã', –±–µ—Ä–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        programsInSelectedCycle = state.journal.map(record => record.programName);
    } else {
        // –ò–Ω–∞—á–µ, –±–µ—Ä–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        programsInSelectedCycle = state.journal
            .filter(record => record.cycleName === state.selectedJournalCategory)
            .map(record => record.programName);
    }

    const allPrograms = [...new Set(programsInSelectedCycle)];

    if (allPrograms.length > 0) {
        const programFilter = createElement('div', 'category-filter sub-filter');
        programFilter.style.marginTop = '10px';

        const createProgramFilterButton = (name, value) => {
            const btn = createElement('button', `filter-btn ${state.selectedJournalProgram === value ? 'active' : ''}`, name);
            btn.addEventListener('click', () => {
                state.selectedJournalProgram = state.selectedJournalProgram === value ? '' : value;
                render();
            });
            return btn;
        };

        allPrograms.forEach(programName => {
            programFilter.append(createProgramFilterButton(programName, programName));
        });
        contentContainer.append(programFilter);
    }


    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –ó–ê–ü–ò–°–ï–ô –ñ–£–†–ù–ê–õ–ê (–° –î–í–û–ô–ù–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô)
    // -----------------------------------------------------------
    const journalList = createElement('div', 'journal-list list-section');

    let filteredJournal = state.journal;

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–∏–∫–ª—É
    if (state.selectedJournalCategory && state.selectedJournalCategory !== 'all') {
        filteredJournal = filteredJournal.filter(record =>
            record.cycleName === state.selectedJournalCategory
        );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    if (state.selectedJournalProgram && state.selectedJournalProgram !== 'all') {
        filteredJournal = filteredJournal.filter(record =>
            record.programName === state.selectedJournalProgram
        );
    }

    if (filteredJournal.length === 0) {
        journalList.append(createElement('div', 'muted', '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º.'));
    } else {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
        filteredJournal.sort((a, b) => {
            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Date
            const datePartsA = a.date.split('.');
            const formattedDateA = `${datePartsA[2]}-${datePartsA[1]}-${datePartsA[0]} ${a.time}`;
            const dateA = new Date(formattedDateA);

            const datePartsB = b.date.split('.');
            const formattedDateB = `${datePartsB[2]}-${datePartsB[1]}-${datePartsB[0]} ${b.time}`;
            const dateB = new Date(formattedDateB);

            return dateB - dateA;
        });

        filteredJournal.forEach(record => {
            const journalRecord = createElement('div', 'journal-record');
            journalRecord.dataset.id = record.id;

            const journalHeader = createElement('div', 'journal-header');
            const dateText = createElement('h4', null, `${record.date} –≤ ${record.time}`);

            const deleteBtn = createElement('button', 'btn delete-btn');
            deleteBtn.addEventListener('click', async () => {
                await deleteDoc(doc(getUserJournalCollection(), record.id));
            });

            deleteBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><title>Ios-trash-outline SVG Icon</title><path d="M400 113.3h-80v-20c0-16.2-13.1-29.3-29.3-29.3h-69.5C205.1 64 192 77.1 192 93.3v20h-80V128h21.1l23.6 290.7c0 16.2 13.1 29.3 29.3 29.3h141c16.2 0 29.3-13.1 29.3-29.3L379.6 128H400v-14.7zm-193.4-20c0-8.1 6.6-14.7 14.6-14.7h69.5c8.1 0 14.6 6.6 14.6 14.7v20h-98.7v-20zm135 324.6v.8c0 8.1-6.6 14.7-14.6 14.7H186c-8.1 0-14.6-6.6-14.6-14.7v-.8L147.7 128h217.2l-23.3 289.9z" fill="currentColor"/><path d="M249 160h14v241h-14z" fill="currentColor"/><path d="M320 160h-14.6l-10.7 241h14.6z" fill="currentColor"/><path d="M206.5 160H192l10.7 241h14.6z" fill="currentColor"/></svg>';
            journalHeader.append(dateText, deleteBtn);

            const programName = createElement('div', 'journal-program-name', `${record.programName}`);

            journalRecord.append(journalHeader, programName);

            // -----------------------------------------------------------
            // üî• –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø (–° –ù–£–ú–ï–†–ê–¶–ò–ï–ô)
            // -----------------------------------------------------------
            (record.exercises || []).forEach((exercise, index) => {
                const exerciseRow = createElement('div', 'journal-exercise-row');

                // –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è
                const exerciseName = createElement('div', 'journal-exercise-name', `${index + 1}. ${exercise.name}`);

                const setsContainer = createElement('div', 'journal-sets');

                (exercise.sets || []).forEach(set => {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    if (set.weight || set.reps) {
                        const setSpan = createElement('span', null, `${set.weight || '0'}x${set.reps || '0'}`);
                        setsContainer.append(setSpan);
                    }
                });

                exerciseRow.append(exerciseName, setsContainer);

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (exercise.note && exercise.note.trim() !== '') {
                    const noteDisplay = createElement('p', 'journal-exercise-note', exercise.note);
                    exerciseRow.append(noteDisplay);
                }

                journalRecord.append(exerciseRow);
            });


            // -----------------------------------------------------------
            // üî• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –¢–†–ï–ù–ò–†–û–í–ö–ò
            // -----------------------------------------------------------
            const commentSection = createElement('div', 'comment-section');
            const commentText = createElement('p', 'comment-text', record.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.');

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if (record.comment && record.comment.trim() !== '') {
                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
                const editCommentBtn = createElement('button', 'btn edit-comment-btn', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
                commentSection.append(commentText, editCommentBtn);

                editCommentBtn.addEventListener('click', () => {
                    // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É
                    commentText.style.display = 'none';
                    editCommentBtn.style.display = 'none';

                    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    const editInput = createElement('textarea', 'comment-edit-input');
                    editInput.value = record.comment || '';
                    editInput.placeholder = '–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...';

                    const saveBtn = createElement('button', 'btn btn-primary btn-small', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');
                    const cancelBtn = createElement('button', 'btn btn-secondary btn-small', '–û—Ç–º–µ–Ω–∞');

                    const controls = createElement('div', 'comment-edit-controls');
                    controls.append(saveBtn, cancelBtn);

                    commentSection.insertBefore(editInput, commentText);
                    commentSection.insertBefore(controls, commentText);

                    const stopEditing = () => {
                        editInput.remove();
                        controls.remove();
                        commentText.style.display = 'block';
                        editCommentBtn.style.display = 'block';
                    };

                    cancelBtn.addEventListener('click', stopEditing);

                    saveBtn.addEventListener('click', async () => {
                        const newComment = editInput.value.trim();
                        const journalRef = doc(getUserJournalCollection(), record.id);
                        try {
                            await updateDoc(journalRef, { comment: newComment });
                            showToast('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!');
                            stopEditing();
                            // Firebase listener –æ–±–Ω–æ–≤–∏—Ç state.journal –∏ –≤—ã–∑–æ–≤–µ—Ç render()
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
                            showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.');
                        }
                    });
                });
            } else {
                // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                commentSection.append(commentText);
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∫–æ–Ω—Ü–µ –∑–∞–ø–∏—Å–∏ (–ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
            journalRecord.append(commentSection);

            journalList.append(journalRecord);
        });
    }

    contentContainer.append(journalList);
    root.append(contentContainer);
}

// =================================================================
// ‚öôÔ∏è –°–õ–£–®–ê–¢–ï–õ–ò FIREBASE (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏)
// =================================================================

function unsubscribeAll() {
    programsUnsubscribe();
    journalUnsubscribe();
    clientsUnsubscribe();
    cyclesUnsubscribe();
}

function setupDynamicListeners() {
    unsubscribeAll(); // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π

    if (!userId) return;

    // 1. –í—Å–µ–≥–¥–∞ —Å–ª—É—à–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –º—ã –≤ —Ä–µ–∂–∏–º–µ "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
    if (state.currentMode === 'personal') {
        clientsUnsubscribe = onSnapshot(getClientsCollection(), (snapshot) => {
            state.clients = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –∫–ª–∏–µ–Ω—Ç–æ–≤
            if (state.currentPage === 'programs' && state.selectedClientId === null) {
                render();
            }
        });
    } else {
        // –°–±—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ –≤ —Ä–µ–∂–∏–º–µ "–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ"
        state.clients = [];
    }

    // 2. –°–ª—É—à–∞–µ–º —Ü–∏–∫–ª—ã (–µ—Å–ª–∏ —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω)
    if (state.currentMode) {
        const shouldListenToCycles = state.currentMode === 'own' || state.selectedClientId;

        if (shouldListenToCycles) {
            cyclesUnsubscribe = onSnapshot(getUserCyclesCollection(), (snapshot) => {
                state.cycles = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ —Ü–∏–∫–ª–æ–≤
                if (state.currentPage === 'programs') {
                    render();
                }
            });
        }
    }


    // 3. –°–ª—É—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã (–µ—Å–ª–∏ —Ü–∏–∫–ª –≤—ã–±—Ä–∞–Ω)
    if (state.selectedCycleId) {
        programsUnsubscribe = onSnapshot(getUserProgramsCollection(), (snapshot) => {
            state.programs = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, –µ—Å–ª–∏ –º—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –ø—Ä–æ–≥—Ä–∞–º–º
            if (state.currentPage === 'programsInCycle' || state.currentPage === 'programDetails') {
                render();
            }
        });
    } else {
        state.programs = [];
    }


    // 4. –°–ª—É—à–∞–µ–º –∂—É—Ä–Ω–∞–ª (–µ—Å–ª–∏ —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω)
    if (state.currentMode) {
        journalUnsubscribe = onSnapshot(getUserJournalCollection(), (snapshot) => {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é
            state.journal = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            if (state.currentPage === 'journal') {
                render();
            }
        });
    }
}




// =================================================================
// üîÑ –ì–õ–ê–í–ù–´–ô –†–ï–ù–î–ï–†: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å
// =================================================================

function render() {
    const root = document.getElementById('root');
    root.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞

    // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    toggleAppVisibility(!!userId);

    // –ï—Å–ª–∏ –Ω–µ—Ç userId (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω) –∏–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω - –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤ root
    if (!userId || state.currentMode === null) return;

    // –¢–µ–ø–µ—Ä—å —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ root –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç state.currentPage
    if (state.currentPage === 'programs') {
        renderCyclesPage();
    } else if (state.currentPage === 'programsInCycle') {
        renderProgramsInCyclePage();
    } else if (state.currentPage === 'programDetails') {
        renderProgramDetailsPage();
    } else if (state.currentPage === 'journal') {
        renderJournalPage();
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    const programsBtn = document.getElementById('programs-btn');
    const journalBtn = document.getElementById('journal-btn');

    if (programsBtn && (state.currentPage === 'programs' || state.currentPage === 'programsInCycle' || state.currentPage === 'programDetails')) {
        programsBtn.classList.add('active');
    } else if (journalBtn && state.currentPage === 'journal') {
        journalBtn.classList.add('active');
    }
}


// =================================================================
// üîë –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
// =================================================================

// üî• –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
let isLoginMode = true;
const authToggleBtn = document.getElementById('auth-toggle-btn');
const authLoginBtn = document.getElementById('auth-login-btn');
if (authToggleBtn && authLoginBtn) {
    authToggleBtn.addEventListener('click', () => {
        isLoginMode = !isLoginMode;
        authLoginBtn.innerText = isLoginMode ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
        authToggleBtn.innerText = isLoginMode ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏';
        document.querySelector('.auth-box h3').innerText = isLoginMode ? '–í—Ö–æ–¥ –≤ –î–Ω–µ–≤–Ω–∏–∫' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
    });

    authLoginBtn.addEventListener('click', async () => {
        const email = document.getElementById('auth-email').value;
        const password = document.getElementById('auth-password').value;
        try {
            if (isLoginMode) {
                await signInWithEmailAndPassword(auth, email, password);
                showToast('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            } else {
                await createUserWithEmailAndPassword(auth, email, password);
                showToast('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥.');
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
            showToast('–û—à–∏–±–∫–∞: ' + (error.message.includes('auth/invalid-credential') ? '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.' : error.message));
        }
    });
}


// =================================================================
// üñ±Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–õ–ò–ö–û–í (–ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞)
// =================================================================

// üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–ü–†–û–ì–†–ê–ú–ú–´" (–û–±—Ä–∞—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏–∑ –î–Ω–µ–≤–Ω–∏–∫–∞)
document.getElementById('programs-btn')?.addEventListener('click', () => {
    if (state.currentMode) {
        if (state.currentPage === 'journal') {
            // –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
            state.currentPage = state.previousPage;
        } else {
            // –ò–Ω–∞—á–µ (–µ—Å–ª–∏ –º—ã —É–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º), –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫–∞–º —Ü–∏–∫–ª–æ–≤/–∫–ª–∏–µ–Ω—Ç–æ–≤
            state.currentPage = 'programs';
            state.selectedProgramIdForDetails = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        }
        render();
    }
});

// üî• –û–ë–ù–û–í–õ–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–î–ù–ï–í–ù–ò–ö" (–û–±—Ä–∞—Ç–Ω–∞—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ)
document.getElementById('journal-btn')?.addEventListener('click', () => {
    if (state.currentMode) {
        if (state.currentPage !== 'journal') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –¥–Ω–µ–≤–Ω–∏–∫
            state.previousPage = state.currentPage;
            state.currentPage = 'journal';
        } else {
            // –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ previousPage
            state.currentPage = state.previousPage;
        }
        render();
    }
});


// üî• –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –≠–ö–†–ê–ù–ê –í–´–ë–û–†–ê –†–ï–ñ–ò–ú–ê

document.getElementById('select-own-mode')?.addEventListener('click', () => {
    state.currentMode = 'own';
    state.currentPage = 'programs';
    setupDynamicListeners();
    render();
});

document.getElementById('select-personal-mode')?.addEventListener('click', () => {
    state.currentMode = 'personal';
    state.currentPage = 'programs';
    setupDynamicListeners();
    render();
});

// üî• –ö–Ω–æ–ø–∫–∞ –í–´–•–û–î–ê –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
document.getElementById('mode-logout-btn')?.addEventListener('click', async () => {
    try {
        await signOut(auth);
        state.currentMode = null;
        showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
        showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.');
    }
});


// =================================================================
// üöÄ –ì–õ–ê–í–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê (–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
// =================================================================

onAuthStateChanged(auth, (user) => {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º userId
    unsubscribeAll();

    if (user) {
        userId = user.uid;
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–æ—à–µ–ª, —Ä–µ–∂–∏–º –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
        if (state.currentMode === null) {
            state.currentPage = 'modeSelect';
            toggleAppVisibility(true); // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        } else {
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã),
            // –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
            setupDynamicListeners();
        }
    } else {
        userId = null;
        state.currentMode = null;
        state.selectedClientId = null;
        state.currentPage = 'auth';
        toggleAppVisibility(false); // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    }

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
    render();
});
