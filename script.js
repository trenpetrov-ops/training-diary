



import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
import {
    getAuth,
    onAuthStateChanged,
    createUserWithEmailAndPassword,
    signInWithEmailAndPassword,
    signOut
} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
import {
    getFirestore,
    doc,
    addDoc,
    setDoc,
    updateDoc,
    deleteDoc,
    onSnapshot,
    collection
} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

// üî• –î–û–ë–ê–í–õ–Ø–ï–ú –ò–ú–ü–û–†–¢–´ –î–õ–Ø FIREBASE STORAGE
import {
    getStorage,
    ref,
    uploadBytes,
    getDownloadURL,
    deleteObject // –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
} from "https://www.gstatic.com/firebasejs/11.6.1/firebase-storage.js";

// =================================================================
// ‚úÖ –í–ê–®–ê –†–ï–ê–õ–¨–ù–ê–Ø –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø FIREBASE
// =================================================================
const firebaseConfig = {
    // –í–°–¢–ê–í–õ–ï–ù–´ –í–ê–®–ò –ö–õ–Æ–ß–ò:
    apiKey: "AIzaSyBRh4hOexYttvkts5AcOxi4bg3Yp7-2d90",
    authDomain: "training-diary-51f0f.firebaseapp.com",
    projectId: "training-diary-51f0f",
    storageBucket: "training-diary-51f0f.firebasestorage.app",
    messagingSenderId: "332026731208",
    appId: "1:332026731208:web:3fa953b94700d00349e3fd"
};

// üî• –í–°–¢–ê–í–¨–¢–ï –°–ö–û–ü–ò–†–û–í–ê–ù–ù–û–ï –ò–ú–Ø –ó–î–ï–°–¨ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'oqsxplh6x')

const CLOUDINARY_CLOUD_NAME = 'dck5p8h6x';
const CLOUDINARY_UPLOAD_PRESET = 'training_diary';


// –ò—Å–ø–æ–ª—å–∑—É–µ–º projectId –≤ –∫–∞—á–µ—Å—Ç–≤–µ —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –±–∞–∑—ã
const appId = firebaseConfig.projectId;
const initialAuthToken = null;
// =================================================================

if (!firebaseConfig || Object.keys(firebaseConfig).length === 0) {
    console.error("Firebase config is missing. Please provide it for the app to work correctly.");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Firebase

const app = initializeApp(firebaseConfig);
const db = getFirestore(app);
const auth = getAuth(app);
const storage = getStorage(app); // üî• –≠–¢–ê –°–¢–†–û–ö–ê –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ó–î–ï–°–¨
let userId = null;


// üî• –ù–û–í–û–ï: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –æ—Ç–ø–∏—Å–∫–∏ –æ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π Firebase
let programsUnsubscribe = () => {};
let journalUnsubscribe = () => {};
let clientsUnsubscribe = () => {};
let cyclesUnsubscribe = () => {};
// üî• –î–û–ë–ê–í–õ–ï–ù–û: –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è –ë–ê–î–û–í –∏ –û–¢–ß–ï–¢–û–í
let supplementsUnsubscribe = () => {};
let reportsUnsubscribe = () => {};


// --- –£–ü–†–ê–í–õ–ï–ù–ò–ï –°–û–°–¢–û–Ø–ù–ò–ï–ú ---
let state = {
    currentMode: null,
    currentPage: 'modeSelect',
    previousPage: 'programs',

    cycles: [],
    selectedCycleId: null,
    programs: [],
    journal: [],
    clients: [],
    selectedClientId: null,
    selectedProgramIdForDetails: null,
    expandedExerciseId: null,
    editingSetId: null,

    // –ñ—É—Ä–Ω–∞–ª
    selectedJournalCategory: '',
    selectedJournalProgram: '',

    // –ë–ê–î—ã (–ü–ª–∞–Ω –ø—Ä–∏–µ–º–∞)
    supplementPlan: null, // –ë—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–µ–∫—É—â–∏–π –ø–ª–∞–Ω –¥–ª—è selectedCycleId

    // –û—Ç—á–µ—Ç—ã
    reports: [],
    selectedReportId: null, // –î–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
};

// =================================================================
// üåü –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: DEBOUNCE (–£—Å—Ç—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –ø—Ä–∏ –≤–≤–æ–¥–µ)
// =================================================================
function debounce(func, delay) {
    let timeout;
    return function(...args) {
        const context = this;
        clearTimeout(timeout);
        timeout = setTimeout(() => func.apply(context, args), delay);
    };
}


function showToast(message) {
    const toast = document.createElement('div');
    toast.className = 'toast-message';
    toast.innerText = message;
    document.body.append(toast);

    setTimeout(() => {
        toast.classList.add('show');
    }, 100);

    setTimeout(() => {
        toast.classList.remove('show');
        setTimeout(() => toast.remove(), 500);
    }, 3000);
}

// üî• –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç—å—é —Ç—Ä–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–∫—Ä–∞–Ω–æ–≤
function toggleAppVisibility(isAuthenticated) {
    const authScreen = document.getElementById('auth-screen');
    const modeSelectScreen = document.getElementById('mode-select-screen');
    const container = document.querySelector('.container');
    const bottomNav = document.querySelector('.navigation');

    // –°–±—Ä–æ—Å –≤—Å–µ—Ö —ç–∫—Ä–∞–Ω–æ–≤
    if (authScreen) authScreen.style.display = 'none';
    if (modeSelectScreen) modeSelectScreen.style.display = 'none';
    if (container) container.style.display = 'none';
    if (bottomNav) bottomNav.style.display = 'none';

    if (!isAuthenticated) {
        // 1. –ù–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω -> –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Auth
        if (authScreen) authScreen.style.display = 'flex';
        state.currentPage = 'auth';
    } else if (isAuthenticated && state.currentMode === null) {
        // 2. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –Ω–æ —Ä–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω -> –ü–æ–∫–∞–∑—ã–≤–∞–µ–º Mode Select
        if (modeSelectScreen) modeSelectScreen.style.display = 'flex';
        state.currentPage = 'modeSelect';
    } else {
        // 3. –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏ —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω -> –ü–æ–∫–∞–∑—ã–≤–∞–µ–º App Container
        if (container) container.style.display = 'block';
        if (bottomNav) bottomNav.style.display = 'flex';
    }
}


// --- –§–£–ù–ö–¶–ò–ò FIREBASE –î–õ–Ø –ö–û–õ–õ–ï–ö–¶–ò–ô ---

function getUserCyclesCollection() {
    if (state.currentMode === 'own') {
        return collection(db, `artifacts/${appId}/users/${userId}/cycles`);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        return collection(db, `artifacts/${appId}/users/${userId}/clients/${state.selectedClientId}/cycles`);
    }
    return collection(db, `artifacts/${appId}/users/${userId}/clients`); // –í–æ–∑–≤—Ä–∞—Ç –∫ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–µ–∂–∏–º–µ personal, –µ—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –≤—ã–±—Ä–∞–Ω
}

function getUserProgramsCollection() {
    if (!state.selectedCycleId) {
        return collection(db, `artifacts/${appId}/users/${userId}/dummy`);
    }

    if (state.currentMode === 'own') {
        return collection(db, `artifacts/${appId}/users/${userId}/cycles/${state.selectedCycleId}/programs`);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        return collection(db, `artifacts/${appId}/users/${userId}/clients/${state.selectedClientId}/cycles/${state.selectedCycleId}/programs`);
    }
    return collection(db, `artifacts/${appId}/users/${userId}/dummy`);
}

function getClientsCollection() {
    return collection(db, `artifacts/${appId}/users/${userId}/clients`);
}

function getUserJournalCollection() {
    if (state.currentMode === 'own') {
        return collection(db, `artifacts/${appId}/users/${userId}/journal`);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        return collection(db, `artifacts/${appId}/users/${userId}/clients/${state.selectedClientId}/journal`);
    }
    return collection(db, `artifacts/${appId}/users/${userId}/journal_dummy`);
}







// üî• –î–û–ë–ê–í–õ–ï–ù–û: –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –ø–ª–∞–Ω–æ–≤ –ë–ê–î–æ–≤
function getSupplementPlanDocRef() {
    if (!state.selectedCycleId) return null;

    let path;
    if (state.currentMode === 'own') {
        path = `artifacts/${appId}/users/${userId}/cycles/${state.selectedCycleId}`;
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        path = `artifacts/${appId}/users/${userId}/clients/${state.selectedClientId}/cycles/${state.selectedCycleId}`;
    }
    return path ? doc(db, path) : null;
}

// üî• –ö–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è –û—Ç—á–µ—Ç–æ–≤, –ø—Ä–∏–≤—è–∑–∞–Ω–Ω–∞—è –∫ —Ü–∏–∫–ª—É
function getReportsCollection() {
    if (!state.selectedCycleId) {
        throw new Error("‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ü–∏–∫–ª, —á—Ç–æ–±—ã —Ä–∞–±–æ—Ç–∞—Ç—å —Å –æ—Ç—á–µ—Ç–∞–º–∏.");
    }

    if (state.currentMode === 'own') {
        return collection(db, `artifacts/${appId}/users/${userId}/cycles/${state.selectedCycleId}/reports`);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        return collection(db, `artifacts/${appId}/users/${userId}/clients/${state.selectedClientId}/cycles/${state.selectedCycleId}/reports`);
    }

    return collection(db, `artifacts/${appId}/users/${userId}/reports_dummy`);
}





// --- –ë–ê–ó–û–í–´–ï –§–£–ù–ö–¶–ò–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê ---
function createElement(tag, classes, innerText = '') {
    const el = document.createElement(tag);
    if (classes) {
        el.className = classes;
    }
    el.innerText = innerText;
    return el;
}

// =================================================================
// üî• –ù–û–í–´–ï/–ò–ó–ú–ï–ù–ï–ù–ù–´–ï –§–£–ù–ö–¶–ò–ò: –£–¢–ò–õ–ò–¢–´ –î–õ–Ø –î–ê–¢
// =================================================================

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
function getDayOfWeek(dateString) {
    const [day, month, year] = dateString.split('.');
    // –°–æ–∑–¥–∞–µ–º –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã new Date
    const date = new Date(`${year}-${month}-${day}`);
    const days = ['–≤—Å', '–ø–Ω', '–≤—Ç', '—Å—Ä', '—á—Ç', '–ø—Ç', '—Å–±'];
    return days[date.getDay()];
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –º–∞—Å—Å–∏–≤–∞ –¥–∞—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∞ 7 –∏–ª–∏ 14 –¥–Ω–µ–π)
function generateDates(startDateString, numberOfDays) {
    const [startDay, startMonth, startYear] = startDateString.split('.');
    const startDate = new Date(`${startYear}-${startMonth}-${startDay}`);
    const dates = [];

    for (let i = 0; i < numberOfDays; i++) {
        const currentDate = new Date(startDate);
        currentDate.setDate(startDate.getDate() + i);

        const day = String(currentDate.getDate()).padStart(2, '0');
        const month = String(currentDate.getMonth() + 1).padStart(2, '0');
        const year = currentDate.getFullYear();
        const dateString = `${day}.${month}.${year}`;

        dates.push({
            date: dateString,
            dayOfWeek: getDayOfWeek(dateString)
        });
    }
    return dates;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞—Ç—ã (–î–î.–ú–ú)
function formatDayAndMonth(dateString) {
    const [day, month] = dateString.split('.');
    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –î–î.–ú–ú
    return `${day}.${month}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
function getTodayDateString() {
    const today = new Date();
    const day = String(today.getDate()).padStart(2, '0');
    const month = String(today.getMonth() + 1).padStart(2, '0');
    const year = today.getFullYear();
    return `${day}.${month}.${year}`;
}

// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –î–î.–ú–ú.–ì–ì–ì–ì –≤ –ì–ì–ì–ì-–ú–ú-–î–î (–¥–ª—è input type="date")
function dateToInputFormat(dateString) {
    if (!dateString) return '';
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ñ–æ—Ä–º–∞—Ç —É–∂–µ –Ω–µ –ì–ì–ì–ì-–ú–ú-–î–î
    if (dateString.includes('-')) return dateString;

    const parts = dateString.split('.');
    if (parts.length === 3) {
        const [d, m, y] = parts;
        return `${y}-${m}-${d}`;
    }
    return '';
}

// =================================================================
// üåü –†–ï–ù–î–ï–†: –ö–ù–û–ü–ö–ê –°–ú–ï–ù–´ –†–ï–ñ–ò–ú–ê
// =================================================================
function renderModeChangeButton(contentContainer) {
    const logoutWrapper = createElement('div', 'logout-wrapper');

    const changeModeBtn = createElement('button', 'btn change-mode-btn', '–°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º');
    changeModeBtn.addEventListener('click', () => {
        state.currentMode = null;
        state.selectedClientId = null;
        state.selectedCycleId = null;
        state.selectedProgramIdForDetails = null;
        setupDynamicListeners(); // –û—Ç–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ä—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        toggleAppVisibility(true); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º –Ω–∞ —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
    });

    const logoutBtn = createElement('button', 'btn back-btn logout-btn', '–í—ã—Ö–æ–¥');
    logoutBtn.addEventListener('click', async () => {
        try {
            await signOut(auth);
            state.currentMode = null; // –°–±—Ä–æ—Å —Ä–µ–∂–∏–º–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
            showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
            showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.');
        }
    });

    logoutWrapper.append(changeModeBtn, logoutBtn);
    contentContainer.append(logoutWrapper);
}

// =================================================================
// üåü –õ–û–ì–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –ö–õ–ò–ï–ù–¢–û–í (ClientList)
// =================================================================
function renderClientsPage() {
    const contentContainer = document.createElement('div');
    contentContainer.id = 'clients-content';
    contentContainer.className = 'clients-list-page';

    renderModeChangeButton(contentContainer);

    const header = createElement('h3', null, '—Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤');
    contentContainer.append(header);

    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –ö–õ–ò–ï–ù–¢–û–í
    // -----------------------------------------------------------
    const clientsList = createElement('div', 'clients-list list-section');

    if (state.clients.length === 0) {
        clientsList.append(createElement('div', 'muted', '–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ!'));
    } else {
        state.clients.forEach(client => {
            const clientItem = createElement('div', 'list-item client-item');
            clientItem.dataset.id = client.id;

            clientItem.innerHTML = `
                <div>${client.name}</div>
                <div>
                    <button class="btn menu-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <circle cx="5" cy="12" r="2"/>
                            <circle cx="12" cy="12" r="2"/>
                            <circle cx="19" cy="12" r="2"/>
                        </svg>
                    </button>
                </div>`;

            // –ö–Ω–æ–ø–∫–∞ ‚ãØ (–º–µ–Ω—é)
            const menuBtn = clientItem.querySelector('.menu-btn');
            menuBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openClientMenuModal(client);
            });

            // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ ‚Üí –ø–µ—Ä–µ—Ö–æ–¥ –∫ —Ü–∏–∫–ª–∞–º –∫–ª–∏–µ–Ω—Ç–∞
            clientItem.addEventListener('click', (e) => {
                if (!e.target.closest('.menu-btn')) {
                    state.selectedClientId = client.id;
                    state.currentPage = 'programs';
                    state.selectedCycleId = null;
                    state.selectedProgramIdForDetails = null;
                    state.expandedExerciseId = null;
                    state.editingSetId = null;

                    setupDynamicListeners();
                    render();
                }
            });

            clientsList.append(clientItem);
        });
    }

    // -----------------------------------------------------------
    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞"
    // -----------------------------------------------------------
    const addClientBtn = createElement('button', 'btn btn-primary add-client-btn', '+');
    addClientBtn.style.margin = '12px';
    addClientBtn.addEventListener('click', () => {
        openAddClientModal(async (name) => {
            const newClient = {
                name: name,
                createdAt: Date.now()
            };
            try {
                await addDoc(getClientsCollection(), newClient);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:", error);
                showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firebase!');
            }
        });
    });
    clientsList.append(addClientBtn);

    contentContainer.append(clientsList);
    root.append(contentContainer);
}

// =================================================================
// üî• –ú–û–î–ê–õ–ö–ê –ú–ï–ù–Æ –ö–õ–ò–ï–ù–¢–ê (–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / –£–¥–∞–ª–∏—Ç—å)
// =================================================================
function openClientMenuModal(client) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-remove-edit';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-remove-edit';

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    const editBtn = createElement('button', 'btn btn-primary', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
    editBtn.addEventListener('click', () => {
        document.body.removeChild(modal);
        openEditClientModal(client);
    });

    // –£–¥–∞–ª–∏—Ç—å
    const deleteBtn = createElement('button', 'btn cancel-btn', 'üóë –£–¥–∞–ª–∏—Ç—å');
    deleteBtn.addEventListener('click', async () => {
        document.body.removeChild(modal);
        openConfirmModal("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞?", async () => {
            await deleteDoc(doc(getClientsCollection(), client.id));
            if (state.selectedClientId === client.id) {
                state.selectedClientId = null;
            }
        });
    });

    modalContent.append(editBtn, deleteBtn);
    modal.append(modalContent);
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –º–∏–º–æ
    modal.addEventListener('click', (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    });
}

// =================================================================
// üî• –ú–û–î–ê–õ–ö–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ö–õ–ò–ï–ù–¢–ê
// =================================================================
function openEditClientModal(client) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-edit';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-edit';

    const title = document.createElement('h3');
    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–∞';

    const input = document.createElement('input');
    input.type = 'text';
    input.value = client.name;
    input.className = 'modal-input';

    const btnGroup = document.createElement('div');
    btnGroup.className = 'modal-buttons';

    const saveBtn = createElement('button', 'btn btn-primary', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');

    saveBtn.addEventListener('click', async () => {
        const newName = input.value.trim();
        if (!newName) {
            showToast('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞!');
            return;
        }
        try {
            await updateDoc(doc(getClientsCollection(), client.id), { name: newName });
            document.body.removeChild(modal);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–ª–∏–µ–Ω—Ç–∞:", error);
            showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    });

    btnGroup.append(saveBtn);
    modalContent.append(title, input, btnGroup);
    modal.append(modalContent);
    document.body.appendChild(modal);

    modal.addEventListener('click', (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    });

    input.focus();
}

// =================================================================
// üåü –ú–û–î–ê–õ–ö–ê: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê
// =================================================================
function openAddClientModal(onConfirm) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-cicle';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-cicle';

    const title = document.createElement('h3');
    title.textContent = '–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç–∞';

    const input = document.createElement('input');
    input.type = 'text';
    input.placeholder = '–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞...';
    input.className = 'modal-input';

    const btnGroup = document.createElement('div');
    btnGroup.className = 'modal-buttons';

    const cancelBtn = createElement('button', 'btn cancel-btn', '–û—Ç–º–µ–Ω–∞');
    const confirmBtn = createElement('button', 'btn btn-primary', '–î–æ–±–∞–≤–∏—Ç—å');

    cancelBtn.addEventListener('click', () => document.body.removeChild(modal));
    confirmBtn.addEventListener('click', async () => {
        const name = input.value.trim();
        if (!name) {
            showToast('–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞!');
            return;
        }
        await onConfirm(name);
        document.body.removeChild(modal);
    });

    btnGroup.append(cancelBtn, confirmBtn);
    modalContent.append(title, input, btnGroup);
    modal.append(modalContent);
    document.body.appendChild(modal);

    input.focus();
}

// =================================================================
// üî• –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –¶–ò–ö–õ–û–í
// =================================================================
function renderCyclesPage() {
    if (state.currentMode === 'personal' && state.selectedClientId === null) {
        renderClientsPage();
        return;
    }

    const contentContainer = document.createElement('div');
    contentContainer.id = 'cycles-content';
    contentContainer.className = 'programs-list-page';

    // -----------------------------------------------------------
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ –∫–ª–∏–µ–Ω—Ç–∞–º –∏–ª–∏ —Å–º–µ–Ω–∞ —Ä–µ–∂–∏–º–∞
    // -----------------------------------------------------------
    if (state.currentMode === 'personal') {
        const backToClientsBtn = createElement('button', 'btn back-btn', '‚Üê –ö –∫–ª–∏–µ–Ω—Ç–∞–º');
        backToClientsBtn.addEventListener('click', () => {
            state.selectedClientId = null;
            state.currentPage = 'programs';
            state.selectedCycleId = null;
            setupDynamicListeners();
            render();
        });
        contentContainer.append(backToClientsBtn);
    } else {
        renderModeChangeButton(contentContainer);
    }

    const headerText = state.currentMode === 'own' ? '–õ–∏—á–Ω—ã–µ —Ü–∏–∫–ª—ã' :
        `–¶–∏–∫–ª—ã –∫–ª–∏–µ–Ω—Ç–∞: ${state.clients.find(c => c.id === state.selectedClientId)?.name || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`;
    const header = createElement('h3', null, headerText);
    contentContainer.append(header);

    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –¶–ò–ö–õ–û–í
    // -----------------------------------------------------------
    const cyclesList = createElement('div', 'programs-list list-section');

    if (state.cycles.length === 0) {
        cyclesList.append(createElement('div', 'muted', '–ù–µ—Ç —Ü–∏–∫–ª–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—ã–π!'));
    } else {
        state.cycles.forEach(cycle => {
            const cycleItem = createElement('div', 'list-item program-item');
            cycleItem.dataset.id = cycle.id;

            // –∫–∞—Ä—Ç–æ—á–∫–∞ —Å –∫–Ω–æ–ø–∫–æ–π ‚ãÆ
            cycleItem.innerHTML = `
                <div>${cycle.name} <small class="muted">(${cycle.startDateString})</small></div>
                <div>
                    <button class="btn menu-btn"><svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
    <circle cx="5" cy="12" r="2"/>
    <circle cx="12" cy="12" r="2"/>
    <circle cx="19" cy="12" r="2"/></button>
                </div>`;

            // –û—Ç–∫—Ä—ã–≤–∞–µ–º –º–µ–Ω—é (—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / —É–¥–∞–ª–∏—Ç—å)
            const menuBtn = cycleItem.querySelector('.menu-btn');
            menuBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openCycleMenuModal(cycle);
            });

            // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ ‚Üí –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ —Ü–∏–∫–ª–µ
            cycleItem.addEventListener('click', (e) => {
                if (!e.target.closest('.menu-btn')) {
                    state.selectedCycleId = cycle.id;
                    state.currentPage = 'programsInCycle';
                    state.selectedProgramIdForDetails = null;
                    state.expandedExerciseId = null;
                    state.editingSetId = null;
                    state.supplementPlan = null;
                    setupDynamicListeners();
                    render();
                }
            });

            cyclesList.append(cycleItem);
        });
    }

    // -----------------------------------------------------------
    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å —Ü–∏–∫–ª"
    // -----------------------------------------------------------
    const addCycleBtn = createElement('button', 'btn btn-primary add-cycle-btn', '+');
    addCycleBtn.style.margin = '12px';
    addCycleBtn.addEventListener('click', () => {
        openAddCycleModal(async (name) => {
            const newCycle = {
                name: name,
                startDate: Date.now(),
                startDateString: new Date().toLocaleDateString('ru-RU'),
                supplementPlan: { supplements: [], data: [] }
            };
            try {
                await addDoc(getUserCyclesCollection(), newCycle);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞:", error);
                showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firebase!');
            }
        });
    });
    cyclesList.append(addCycleBtn);

    contentContainer.append(cyclesList);
    root.append(contentContainer);
}

// =================================================================
// üî• –ú–û–î–ê–õ–ö–ê –ú–ï–ù–Æ –¶–ò–ö–õ–ê (–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / –£–¥–∞–ª–∏—Ç—å)
// =================================================================
function openCycleMenuModal(cycle) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-remove-edit';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-remove-edit';



    // –ö–Ω–æ–ø–∫–∞ "–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å"
    const editBtn = createElement('button', 'btn btn-primary', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
    editBtn.addEventListener('click', () => {
        document.body.removeChild(modal);
        openEditCycleModal(cycle);
    });

    // –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
    const deleteBtn = createElement('button', 'btn cancel-btn', 'üóë –£–¥–∞–ª–∏—Ç—å');
    deleteBtn.addEventListener('click', () => {
        document.body.removeChild(modal);
        openConfirmModal("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ü–∏–∫–ª?", async () => {
            await deleteDoc(doc(getUserCyclesCollection(), cycle.id));
        });
    });

    modalContent.append( editBtn, deleteBtn);
    modal.append(modalContent);
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
    modal.addEventListener('click', (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    });
}

// =================================================================
// üî• –ú–û–î–ê–õ–ö–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ù–ê–ó–í–ê–ù–ò–Ø –¶–ò–ö–õ–ê
// =================================================================
function openEditCycleModal(cycle) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-edit';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-edit';

    const title = document.createElement('h3');
    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ü–∏–∫–ª';

    const input = document.createElement('input');
    input.type = 'text';
    input.value = cycle.name;
    input.className = 'modal-input';

    const btnGroup = document.createElement('div');
    btnGroup.className = 'modal-buttons';

    const saveBtn = createElement('button', 'btn btn-primary', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');

    saveBtn.addEventListener('click', async () => {
        const newName = input.value.trim();
        if (!newName) {
            showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!');
            return;
        }
        try {
            await updateDoc(doc(getUserCyclesCollection(), cycle.id), { name: newName });
            document.body.removeChild(modal);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ü–∏–∫–ª–∞:", error);
            showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    });

    btnGroup.append(saveBtn);
    modalContent.append(title, input, btnGroup);
    modal.append(modalContent);
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
    modal.addEventListener('click', (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    });

    input.focus();
}


// =================================================================
// üåü –ú–û–î–ê–õ–ö–ê: –î–û–ë–ê–í–õ–ï–ù–ò–ï –¶–ò–ö–õ–ê
// =================================================================
function openAddCycleModal(onConfirm) {
    console.log('–ú–æ–¥–∞–ª–∫–∞ –¥–æ–ª–∂–Ω–∞ –æ—Ç–∫—Ä—ã—Ç—å—Å—è'); // –ø—Ä–æ–≤–µ—Ä–∫–∞
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-cicle';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-cicle';

    const title = document.createElement('h3');
    title.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª–∞';

    const input = document.createElement('input');
    input.type = 'text';
    input.placeholder = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞...';
    input.className = 'modal-input';

    const btnGroup = document.createElement('div');
    btnGroup.className = 'modal-buttons';

    const cancelBtn = createElement('button', 'btn cancel-btn', '–û—Ç–º–µ–Ω–∞');
    const confirmBtn = createElement('button', 'btn btn-primary', '–°–æ–∑–¥–∞—Ç—å');

    cancelBtn.addEventListener('click', () => document.body.removeChild(modal));
    confirmBtn.addEventListener('click', async () => {
        const name = input.value.trim();
        if (!name) {
            showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ü–∏–∫–ª–∞!');
            return;
        }
        await onConfirm(name);
        document.body.removeChild(modal);
    });

    btnGroup.append(cancelBtn, confirmBtn);
    modalContent.append(title, input, btnGroup);
    modal.append(modalContent);
    document.body.appendChild(modal);

    input.focus();
}





// =================================================================
// üî• –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º –≤–Ω—É—Ç—Ä–∏ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
// =================================================================
function renderProgramsInCyclePage() {
    const currentCycle = state.cycles.find(c => c.id === state.selectedCycleId);

    if (!currentCycle) {
        state.currentPage = 'programs';
        state.selectedCycleId = null;
        render();
        return;
    }

    const contentContainer = document.createElement('div');
    contentContainer.id = 'programs-content';
    contentContainer.className = 'programs-list-page';

    // -----------------------------------------------------------
    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∫ —Ü–∏–∫–ª–∞–º
    // -----------------------------------------------------------
    const backButtonText = state.currentMode === 'own' ? '‚Üê –ö —Ü–∏–∫–ª–∞–º' : `‚Üê –ö —Ü–∏–∫–ª–∞–º –∫–ª–∏–µ–Ω—Ç–∞`;
    const backButton = createElement('button', 'btn back-btn', backButtonText);

    backButton.addEventListener('click', () => {
        state.currentPage = 'programs';
        state.selectedProgramIdForDetails = null;
        render();
    });
    contentContainer.append(backButton);

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const header = createElement('h3', null, `${currentCycle.name} - –ø—Ä–æ–≥—Ä–∞–º–º—ã`);
    contentContainer.append(header);

    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –ü–†–û–ì–†–ê–ú–ú
    // -----------------------------------------------------------
    const programsList = createElement('div', 'programs-list list-section');

    if (state.programs.length === 0) {
        programsList.append(createElement('div', 'muted', '–ù–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é!'));
    } else {
        state.programs.forEach(program => {
            const programItem = createElement('div', 'list-item program-item');
            programItem.dataset.id = program.id;

            programItem.innerHTML = `
                <div>${program.name}</div>
                <div>
                    <button class="btn menu-btn">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <circle cx="5" cy="12" r="2"/>
                            <circle cx="12" cy="12" r="2"/>
                            <circle cx="19" cy="12" r="2"/>
                        </svg>
                    </button>
                </div>`;

            // –ö–Ω–æ–ø–∫–∞ ‚ãØ (–º–µ–Ω—é)
            const menuBtn = programItem.querySelector('.menu-btn');
            menuBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openProgramMenuModal(program);
            });

            // –ö–ª–∏–∫ –ø–æ –∫–∞—Ä—Ç–æ—á–∫–µ ‚Üí –æ—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏
            programItem.addEventListener('click', (e) => {
                if (!e.target.closest('.menu-btn')) {
                    state.selectedProgramIdForDetails = program.id;
                    state.currentPage = 'programDetails';
                    state.expandedExerciseId = null;
                    state.editingSetId = null;
                    render();
                }
            });

            programsList.append(programItem);
        });
    }

    // -----------------------------------------------------------
    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É"
    // -----------------------------------------------------------
    const addProgramBtn = createElement('button', 'btn btn-primary add-program-btn', '+');
    addProgramBtn.style.margin = '12px';
    addProgramBtn.addEventListener('click', () => {
        openAddProgramModal(async (name) => {
            const newProgram = {
                name: name,
                exercises: [],
                trainingNote: ''
            };
            try {
                await addDoc(getUserProgramsCollection(), newProgram);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:", error);
                showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firebase!');
            }
        });
    });
    programsList.append(addProgramBtn);

    contentContainer.append(programsList);
    root.append(contentContainer);
}

// =================================================================
// üî• –ú–û–î–ê–õ–ö–ê –ú–ï–ù–Æ –ü–†–û–ì–†–ê–ú–ú–´ (–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / –£–¥–∞–ª–∏—Ç—å)
// =================================================================
function openProgramMenuModal(program) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-remove-edit';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-remove-edit';

    // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    const editBtn = createElement('button', 'btn btn-primary', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
    editBtn.addEventListener('click', () => {
        document.body.removeChild(modal);
        openEditProgramModal(program);
    });

    // –£–¥–∞–ª–∏—Ç—å
    const deleteBtn = createElement('button', 'btn cancel-btn', 'üóë –£–¥–∞–ª–∏—Ç—å');
    deleteBtn.addEventListener('click', () => {
        document.body.removeChild(modal);
        openConfirmModal("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –ø—Ä–æ–≥—Ä–∞–º–º—É?", async () => {
            await deleteDoc(doc(getUserProgramsCollection(), program.id));
            if (state.selectedProgramIdForDetails === program.id) {
                state.selectedProgramIdForDetails = null;
            }
        });
    });

    modalContent.append(editBtn, deleteBtn);
    modal.append(modalContent);
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –º–∏–º–æ
    modal.addEventListener('click', (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    });
}

// =================================================================
// üî• –ú–û–î–ê–õ–ö–ê –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ü–†–û–ì–†–ê–ú–ú–´
// =================================================================
function openEditProgramModal(program) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-edit';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-edit';

    const title = document.createElement('h3');
    title.textContent = '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É';

    const input = document.createElement('input');
    input.type = 'text';
    input.value = program.name;
    input.className = 'modal-input';

    const btnGroup = document.createElement('div');
    btnGroup.className = 'modal-buttons';

    const saveBtn = createElement('button', 'btn btn-primary', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');

    saveBtn.addEventListener('click', async () => {
        const newName = input.value.trim();
        if (!newName) {
            showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ!');
            return;
        }
        try {
            await updateDoc(doc(getUserProgramsCollection(), program.id), { name: newName });
            document.body.removeChild(modal);
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–≥—Ä–∞–º–º—ã:", error);
            showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
        }
    });

    btnGroup.append(saveBtn);
    modalContent.append(title, input, btnGroup);
    modal.append(modalContent);
    document.body.appendChild(modal);

    modal.addEventListener('click', (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    });

    input.focus();
}

// =================================================================
// üåü –ú–û–î–ê–õ–ö–ê: –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–û–ì–†–ê–ú–ú–´
// =================================================================
function openAddProgramModal(onConfirm) {
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-cicle';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-cicle';

    const title = document.createElement('h3');
    title.textContent = '–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã';

    const input = document.createElement('input');
    input.type = 'text';
    input.placeholder = '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã...';
    input.className = 'modal-input';

    const btnGroup = document.createElement('div');
    btnGroup.className = 'modal-buttons';

    const cancelBtn = createElement('button', 'btn cancel-btn', '–û—Ç–º–µ–Ω–∞');
    const confirmBtn = createElement('button', 'btn btn-primary', '–°–æ–∑–¥–∞—Ç—å');

    cancelBtn.addEventListener('click', () => document.body.removeChild(modal));
    confirmBtn.addEventListener('click', async () => {
        const name = input.value.trim();
        if (!name) {
            showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã!');
            return;
        }
        await onConfirm(name);
        document.body.removeChild(modal);
    });

    btnGroup.append(cancelBtn, confirmBtn);
    modalContent.append(title, input, btnGroup);
    modal.append(modalContent);
    document.body.appendChild(modal);

    input.focus();
}


// =================================================================
// üåü –ú–æ–¥–∞–ª–∫–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∞
// =================================================================
function openEditSetModal(programId, exerciseId, setIndex, currentSet) {
    const overlay = document.createElement('div');
    overlay.className = 'modal-overlay';

    const modal = document.createElement('div');
    modal.className = 'modal';

    const title = createElement('h3', null, `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥—Ö–æ–¥ ${setIndex + 1}`);

    const weightInput = createElement('input');
    weightInput.type = 'number';
    weightInput.placeholder = '–í–µ—Å (–∫–≥)';
    weightInput.value = currentSet.weight || '';

    const repsInput = createElement('input');
    repsInput.type = 'number';
    repsInput.placeholder = '–ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è';
    repsInput.value = currentSet.reps || '';

    // –ß–µ–∫–±–æ–∫—Å –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
    const isMainCheckboxLabel = createElement('label', null, ' –†–∞–±–æ—á–∏–π –ø–æ–¥—Ö–æ–¥');
    const isMainCheckbox = createElement('input');
    isMainCheckbox.type = 'checkbox';
    isMainCheckbox.checked = !!currentSet.isMain; // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    isMainCheckboxLabel.prepend(isMainCheckbox);

    // –ö–Ω–æ–ø–∫–∞ "–û–ö"
    const btnOk = createElement('button', 'btn btn-primary', '–û–ö');

    btnOk.addEventListener('click', async () => {
        const newWeight = weightInput.value.trim();
        const newReps = repsInput.value.trim();

        const program = state.programs.find(p => p.id === programId);
        if (program) {
            const exercise = program.exercises.find(ex => ex.id === exerciseId);
            if (exercise) {
                // –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –ø–æ–¥—Ö–æ–¥
                exercise.sets[setIndex].weight = newWeight;
                exercise.sets[setIndex].reps = newReps;
                exercise.sets[setIndex].isMain = isMainCheckbox.checked; // –º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ true

                await updateDoc(doc(getUserProgramsCollection(), program.id), {
                    exercises: program.exercises
                });

                render();
            }
        }
        document.body.removeChild(overlay);
    });

    modal.append(title, weightInput, repsInput, isMainCheckboxLabel, btnOk);
    overlay.append(modal);
    document.body.append(overlay);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –∫–ª–∏–∫–æ–º –ø–æ —Ñ–æ–Ω—É
    overlay.addEventListener('click', (e) => {
        if (e.target === overlay) {
            document.body.removeChild(overlay);
        }
    });
}


// =================================================================
// üåü –ú–û–î–ê–õ–ö–ê: –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é –∏–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
// =================================================================
function openCommentModal(itemId, currentNote, title, saveCallback) {
    const modalId = `modal-comment-${itemId}`;
    let modal = document.getElementById(modalId);
    if (modal) modal.remove();

    modal = document.createElement('div');
    modal.className = 'modal-overlay-exercise';
    modal.id = modalId;

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-content';
    modalContent.innerHTML = `
        <h4 class="modal-title">${title}</h4>
        <textarea id="comment-input-${itemId}" class="comment-edit-input" placeholder="–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...">${currentNote || ''}</textarea>
        <div class="modal-controls">
            <button class="btn btn-primary modal-save-btn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
        </div>
    `;

    modal.append(modalContent);
    document.body.append(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
    modal.addEventListener('click', (e) => {
        if (e.target === modal) modal.remove();
    });

    const saveBtn = modal.querySelector('.modal-save-btn');
    saveBtn.addEventListener('click', async () => {
        const newNote = modal.querySelector(`#comment-input-${itemId}`).value.trim();
        await saveCallback(newNote);
        modal.remove();
    });

    modal.querySelector(`#comment-input-${itemId}`).focus();
}

// =================================================================
// üåü –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
// =================================================================
async function saveTrainingNote(programId, note) {
    try {
        await updateDoc(doc(getUserProgramsCollection(), programId), { trainingNote: note });
        showToast('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ:", error);
        showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.');
    }
}

// =================================================================
// üåü –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
// =================================================================
async function saveExerciseNote(programId, exerciseId, note) {
    const currentProgram = state.programs.find(p => p.id === programId);
    if (!currentProgram) return;

    const exercise = (currentProgram.exercises || []).find(ex => ex.id === exerciseId);
    if (!exercise) return;

    exercise.note = note;

    try {
        await updateDoc(doc(getUserProgramsCollection(), currentProgram.id), { exercises: currentProgram.exercises });
        showToast('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é:", error);
        showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è.');
    }
}




// =================================================================
// üåü –§–£–ù–ö–¶–ò–Ø: –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏
// =================================================================
function renderProgramDetailsPage() {
    const selectedProgram = state.programs.find(p => p.id === state.selectedProgramIdForDetails);

    if (!selectedProgram) {
        state.currentPage = 'programsInCycle';
        state.selectedProgramIdForDetails = null;
        render();
        return;
    }

    const contentContainer = createElement('div', 'program-details-page');
    contentContainer.id = 'program-details-content';


    // –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    const backButton = createElement('button', 'btn back-btn', '‚Üê –ö –ø—Ä–æ–≥—Ä–∞–º–º–∞–º —Ü–∏–∫–ª–∞');
    backButton.addEventListener('click', () => {
        state.currentPage = 'programsInCycle';
        state.selectedProgramIdForDetails = null;
        render();
    });
    contentContainer.append(backButton);

    contentContainer.append(createElement('h3', null, selectedProgram.name));



    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –£–ü–†–ê–ñ–ù–ï–ù–ò–ô
    // -----------------------------------------------------------
    if (!selectedProgram.exercises || selectedProgram.exercises.length === 0) {
        contentContainer.append(createElement('div', 'muted', '–ù–µ—Ç —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π. –î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ!'));
    } else {
        const exercisesListSection = createElement('div', 'list-section');

        selectedProgram.exercises.forEach((exercise, index) => {
            const isExpanded = state.expandedExerciseId === exercise.id;
            const hasNote = exercise.note && exercise.note.trim() !== '';

            const exerciseItem = createElement('div', 'exercise-item');
            const exerciseHeader = createElement('div', `exercise-header ${isExpanded ? 'expanded' : ''}`);

            const exerciseTitle = createElement('div', 'exercise-title');
            const exerciseNumber = createElement('span', 'exercise-number', `${index + 1}.`);
            const exerciseName = createElement('span', 'exercise-name', exercise.name);
            exerciseTitle.append(exerciseNumber, exerciseName);

            const controlButtons = createElement('div', 'control-buttons');

            // –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é (‚ãÆ)
            const menuBtn = createElement('button', 'btn menu-btn', '‚ãÆ');
            menuBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openExerciseMenuModal(selectedProgram, exercise);
            });

            controlButtons.append(menuBtn);
            exerciseHeader.append(exerciseTitle, controlButtons);

            // –ö–ª–∏–∫ –Ω–∞ –∑–∞–≥–æ–ª–æ–≤–æ–∫ ‚Üí —Ä–∞—Å–∫—Ä—ã—Ç—å / —Å–≤–µ—Ä–Ω—É—Ç—å –ø–æ–¥—Ö–æ–¥—ã
            exerciseHeader.addEventListener('click', () => {
                state.expandedExerciseId = (state.expandedExerciseId === exercise.id ? null : exercise.id);
                render();
            });

            const setsContainer = createElement('div', `sets-container ${isExpanded ? 'expanded' : ''}`);

            // –°–≤–µ—Ä–Ω—É—Ç—ã–π –≤–∏–¥ –ø–æ–¥—Ö–æ–¥–æ–≤
            const summarySetsContainer = createElement('div', `summary-sets-container ${!isExpanded ? 'visible' : ''}`);
            const summarySets = (exercise.sets || []).filter(set => (set.weight && set.weight.trim() !== '') || (set.reps && set.reps.trim() !== ''));
            summarySets.forEach((set) => {
                const summarySpan = createElement('span', set.isMain ? 'main-set' : '', `${set.weight || '0'}x${set.reps || '0'}`);
                summarySetsContainer.append(summarySpan);
            });

            // –ü–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –ø–æ–¥—Ö–æ–¥–æ–≤
            if (Array.isArray(exercise.sets)) {
                exercise.sets.forEach((set, setIndex) => {
                    const setRow = createElement('div', `set-row ${set.isMain ? 'main-set' : ''}`);

                    const setNumberLabel = createElement('span', 'set-label', `${setIndex + 1}.`);
                    setRow.append(setNumberLabel);

                    const setText = createElement('span', 'set-display');
                    const displayWeight = set.weight || '...';
                    const displayReps = set.reps || '...';
                    setText.innerHTML = `${displayWeight} <small>–∫–≥</small> x ${displayReps} <small>–ø–æ–≤</small>`;
                    setRow.append(setText);

                    // üìå –ü—Ä–∏ –∫–ª–∏–∫–µ ‚Üí —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º –ø–æ–¥—Ö–æ–¥
                    setRow.addEventListener('click', (e) => {
                        e.stopPropagation();
                        openEditSetModal(selectedProgram.id, exercise.id, setIndex, set);
                    });

                    // üóë –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–∞
                    const deleteSetBtn = createElement('button', 'btn delete-set-btn', 'üóë');
                    deleteSetBtn.addEventListener('click', (e) => {
                        e.stopPropagation();

                        openConfirmModal('–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –ø–æ–¥—Ö–æ–¥?', async () => {
                            exercise.sets.splice(setIndex, 1);

                            // –ï—Å–ª–∏ –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ–¥—Ö–æ–¥–æ–≤ –º–∞—Å—Å–∏–≤ –ø—É—Å—Ç–æ–π, —É–¥–∞–ª—è–µ–º –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
                            if (exercise.sets.length === 0) {
                                const currentProgram = state.programs.find(p => p.id === selectedProgram.id);
                                if (currentProgram) {
                                    currentProgram.exercises = currentProgram.exercises.filter(ex => ex.id !== exercise.id);
                                }
                            }

                            await updateDoc(doc(getUserProgramsCollection(), selectedProgram.id), {
                                exercises: selectedProgram.exercises
                            });
                            render();
                        });
                    });
                    setRow.append(deleteSetBtn);

                    setsContainer.append(setRow);
                });
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞
            const addSetBtn = createElement('button', 'add-set-btn', '+');
            addSetBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                const currentExercise = selectedProgram.exercises.find(ex => ex.id === exercise.id);
                currentExercise.sets.push({ weight: '', reps: '', isMain: false });
                updateDoc(doc(getUserProgramsCollection(), selectedProgram.id), { exercises: selectedProgram.exercises }).then(render);
            });

            // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
            const editNoteBtn = createElement('button', `btn edit-note-btn ${hasNote ? 'has-note' : ''}`, 'üìù');
            editNoteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openCommentModal(
                    exercise.id,
                    exercise.note,
                    `–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ ${exercise.name}`,
                    (newNote) => saveExerciseNote(selectedProgram.id, exercise.id, newNote)
                );
            });

            const bottomButtons = createElement('div', 'exercise-bottom-buttons');
            bottomButtons.style.display = 'flex';
            bottomButtons.style.gap = '5px';
            bottomButtons.append(addSetBtn, editNoteBtn);

            setsContainer.append(bottomButtons);

            // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ–¥—Ö–æ–¥–∞–º–∏
            if (isExpanded && hasNote) {
                const exerciseNoteContainer = createElement('div', 'exercise-note-display');
                const noteText = createElement('p', 'comment-text', exercise.note);
                exerciseNoteContainer.append(noteText);
                setsContainer.append(exerciseNoteContainer);
            }

            exerciseItem.append(exerciseHeader, summarySetsContainer, setsContainer);
            exercisesListSection.append(exerciseItem);
        });

        contentContainer.append(exercisesListSection);
    }



    // -----------------------------------------------------------
    // –ö–ù–û–ü–ö–ê "–î–û–ë–ê–í–ò–¢–¨ –£–ü–†–ê–ñ–ù–ï–ù–ò–ï"
    // -----------------------------------------------------------
    const addExerciseBtn = createElement('button', 'btn btn-primary add-exercise-btn', '+ –î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ');
    addExerciseBtn.addEventListener('click', () => {
        openAddExerciseModal(selectedProgram);
    });
    contentContainer.append(addExerciseBtn);




    // -----------------------------------------------------------
    // –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –ö –¢–†–ï–ù–ò–†–û–í–ö–ï
    // -----------------------------------------------------------
    const hasTrainingNote = selectedProgram.trainingNote && selectedProgram.trainingNote.trim() !== '';
    const commentWrapper = createElement('div', 'comment-wrapper');
    const commentBtn = createElement('button', `btn comment-toggle-btn ${hasTrainingNote ? 'has-note' : ''}`, `‚úèÔ∏è ${hasTrainingNote ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π' : '–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'}`);

    if (hasTrainingNote) {
        const noteDisplay = createElement('p', 'comment-text-display', selectedProgram.trainingNote);
        commentWrapper.append(noteDisplay);
    }

    commentBtn.addEventListener('click', () => {
        openCommentModal(
            selectedProgram.id,
            selectedProgram.trainingNote,
            '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ',
            (newNote) => saveTrainingNote(selectedProgram.id, newNote)
        );
    });

    commentWrapper.prepend(commentBtn);
    contentContainer.append(commentWrapper);

    // -----------------------------------------------------------
    // –ö–ù–û–ü–ö–ê –ó–ê–í–ï–†–®–ï–ù–ò–Ø –¢–†–ï–ù–ò–†–û–í–ö–ò
    // -----------------------------------------------------------
    const completeTrainingBtn = createElement('button', 'btn complete-training-btn', '–ó–∞–≤–µ—Ä—à–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É');
    completeTrainingBtn.addEventListener('click', () => {
        openConfirmModal('–ó–∞–≤–µ—Ä—à–∏—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É –≤ –¥–Ω–µ–≤–Ω–∏–∫?', async () => {
            const exercisesToSave = selectedProgram.exercises
                .filter(ex => ex.note || (ex.sets && ex.sets.some(set => set.weight || set.reps)))
                .map(ex => ({ ...ex }));

            if (exercisesToSave.length === 0 && !selectedProgram.trainingNote) {
                showToast('–ù–µ—á–µ–≥–æ —Å–æ—Ö—Ä–∞–Ω—è—Ç—å!');
                return;
            }

            const currentCycle = state.cycles.find(c => c.id === state.selectedCycleId);
            const trainingRecord = {
                date: new Date().toLocaleDateString('ru-RU'),
                time: new Date().toLocaleTimeString('ru-RU'),
                programName: selectedProgram.name,
                category: currentCycle ? currentCycle.name : selectedProgram.name,
                cycleName: currentCycle ? currentCycle.name : '–ë–µ–∑ —Ü–∏–∫–ª–∞',
                comment: selectedProgram.trainingNote || '',
                exercises: exercisesToSave
            };

            try {
                await addDoc(getUserJournalCollection(), trainingRecord);
                showToast('–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ!');
                state.currentPage = 'programsInCycle';
                state.selectedProgramIdForDetails = null;
                state.expandedExerciseId = null;
                render();
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:", error);
                showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –¥–Ω–µ–≤–Ω–∏–∫–∞.');
            }
        });
    });

    contentContainer.append(completeTrainingBtn);
    root.append(contentContainer);
}




// =================================================================
// üåü –ú–û–î–ê–õ–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
// =================================================================
function openAddExerciseModal(program) {
    const modal = createElement('div', 'modal-overlay');
    const modalContent = createElement('div', 'modal-content');

    const title = createElement('h3', null, '–î–æ–±–∞–≤–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ');
    const input = createElement('input', 'modal-input');
    input.placeholder = '–ù–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è';

    const btnGroup = createElement('div', 'modal-buttons');
    const cancelBtn = createElement('button', 'btn cancel-btn', '–û—Ç–º–µ–Ω–∞');
    const saveBtn = createElement('button', 'btn btn-primary', '–î–æ–±–∞–≤–∏—Ç—å');

    cancelBtn.addEventListener('click', () => document.body.removeChild(modal));
    saveBtn.addEventListener('click', async () => {
        const name = input.value.trim();
        if (!name) return showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!');

        const newExercise = { id: Date.now().toString(), name, sets: [{ weight: '', reps: '' }], note: '' };
        program.exercises = program.exercises || [];
        program.exercises.push(newExercise);

        await updateDoc(doc(getUserProgramsCollection(), program.id), { exercises: program.exercises });
        document.body.removeChild(modal);
        render();
    });

    btnGroup.append(cancelBtn, saveBtn);
    modalContent.append(title, input, btnGroup);
    modal.append(modalContent);
    document.body.append(modal);
    input.focus();
}


// =================================================================
// üåü –ú–û–î–ê–õ–ö–ê: –ú–µ–Ω—é —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å / –£–¥–∞–ª–∏—Ç—å)
// =================================================================
function openExerciseMenuModal(program, exercise) {
    if (!program || !exercise) return;

    // –°–æ–∑–¥–∞—ë–º –æ–≤–µ—Ä–ª–µ–π
    const modal = document.createElement('div');
    modal.className = 'modal-overlay-remove-edit';

    // –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª–∫–∏
    const modalContent = document.createElement('div');
    modalContent.className = 'modal-remove-edit';

    // –ö–Ω–æ–ø–∫–∞ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    const editBtn = createElement('button', 'btn btn-primary', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
    editBtn.addEventListener('click', () => {
        document.body.removeChild(modal);
        openEditExerciseModal(program, exercise); // –ø–µ—Ä–µ–¥–∞—ë–º –ø—Ä–æ–≥—Ä–∞–º–º—É –∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ
    });

    // –ö–Ω–æ–ø–∫–∞ –£–¥–∞–ª–∏—Ç—å
    const deleteBtn = createElement('button', 'btn cancel-btn', 'üóë –£–¥–∞–ª–∏—Ç—å');
    deleteBtn.addEventListener('click', () => {
        document.body.removeChild(modal);
        openConfirmModal("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ?", async () => {
            program.exercises = (program.exercises || []).filter(ex => ex.id !== exercise.id);
            state.expandedExerciseId = null;
            state.editingSetId = null;
            await updateDoc(doc(getUserProgramsCollection(), program.id), { exercises: program.exercises });
            render(); // —Ä–µ–Ω–¥–µ—Ä–∏–º –ø–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è
        });
    });

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –º–æ–¥–∞–ª–∫—É
    modalContent.append(editBtn, deleteBtn);
    modal.append(modalContent);
    document.body.append(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
    modal.addEventListener('click', (e) => {
        if (e.target === modal) {
            document.body.removeChild(modal);
        }
    });
}


// =================================================================
// üåü –ú–û–î–ê–õ–ö–ê: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
// =================================================================
// =================================================================
// üåü –ú–û–î–ê–õ–ö–ê: –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
// =================================================================
function openEditExerciseModal(program, exercise) {
    if (!exercise || !program) return; // –ø—Ä–æ–≤–µ—Ä–∫–∞

    const modal = document.createElement('div');
    modal.className = 'modal-overlay-edit';

    const modalContent = document.createElement('div');
    modalContent.className = 'modal-edit';

    const title = document.createElement('h3');
    title.textContent = `–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ`;

    const input = document.createElement('input');
    input.type = 'text';
    input.value = exercise.name; // —Ç–µ–∫—É—â–µ–µ –∏–º—è
    input.className = 'modal-input';

    const saveBtn = createElement('button', 'btn btn-primary', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');

    saveBtn.addEventListener('click', async () => {
        const newName = input.value.trim();
        if (!newName) {
            showToast('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è!');
            return;
        }

        // –ù–∞—Ö–æ–¥–∏–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–µ
        const ex = program.exercises.find(ex => ex.id === exercise.id);
        if (!ex) return;

        // –û–±–Ω–æ–≤–ª—è–µ–º –∏–º—è
        ex.name = newName;

        try {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Firebase
            await updateDoc(doc(getUserProgramsCollection(), program.id), { exercises: program.exercises });
            document.body.removeChild(modal);
            render();
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è:", error);
            showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è.');
        }
    });

    modalContent.append(title, input, saveBtn);
    modal.append(modalContent);
    document.body.appendChild(modal);

    // –ó–∞–∫—Ä—ã—Ç–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ –º–æ–¥–∞–ª–∫–∏
    modal.addEventListener('click', (e) => {
        if (e.target === modal) document.body.removeChild(modal);
    });

    input.focus();
}



// =================================================================
// üåü –õ–û–ì–ò–ö–ê –°–¢–†–ê–ù–ò–¶–´ –î–ù–ï–í–ù–ò–ö–ê
// =================================================================
function renderJournalPage() {
    const contentContainer = document.createElement('div');
    contentContainer.id = 'journal-content';
    contentContainer.className = 'journal-page';

    if (state.currentMode === 'own' || (state.currentMode === 'personal' && state.selectedClientId === null)) {
        renderModeChangeButton(contentContainer);
    } else if (state.currentMode === 'personal' && state.selectedClientId) {
        const backToClientsBtn = createElement('button', 'btn back-btn', '‚Üê –ö —Ü–∏–∫–ª–∞–º');
        backToClientsBtn.addEventListener('click', () => {
            state.currentPage = 'programs';
            state.selectedProgramIdForDetails = null;
            render();
        });
        contentContainer.append(backToClientsBtn);
    }


    const header = createElement('h3', null, '–î–Ω–µ–≤–Ω–∏–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫');
    contentContainer.append(header);

    // -----------------------------------------------------------
    // –§–ò–õ–¨–¢–† 1: –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú (–¶–ò–ö–õ–ê–ú)
    // -----------------------------------------------------------
    const allCategories = [...new Set(state.journal.map(record => record.cycleName || '–ë–µ–∑ —Ü–∏–∫–ª–∞'))];
    const categoryFilter = createElement('div', 'category-filter');

    const createFilterButton = (name, value) => {
        const btn = createElement('button', `filter-btn ${state.selectedJournalCategory === value ? 'active' : ''}`, name);
        btn.addEventListener('click', () => {
            const newCategory = state.selectedJournalCategory === value ? '' : value;
            if (newCategory !== state.selectedJournalCategory) {
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä –ø—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–∏ —Å–º–µ–Ω–µ —Ü–∏–∫–ª–∞
                state.selectedJournalProgram = '';
            }
            state.selectedJournalCategory = newCategory;
            render();
        });
        return btn;
    };

    // –ö–Ω–æ–ø–∫–∞ "–í—Å–µ —Ü–∏–∫–ª—ã" –∫–∞–∫ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –Ω–∞—á–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
    allCategories.forEach(category => {
        categoryFilter.append(createFilterButton(category, category));
    });
    contentContainer.append(categoryFilter);

    // -----------------------------------------------------------
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    // -----------------------------------------------------------
    if (!state.selectedJournalCategory) {
        contentContainer.append(createElement('div', 'muted', '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª, —á—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–ø–∏—Å–∏.'));
        root.append(contentContainer);
        return;
    }


    // -----------------------------------------------------------
    // –§–ò–õ–¨–¢–† 2: –ü–û –ü–†–û–ì–†–ê–ú–ú–ê–ú (–í–ù–£–¢–†–ò –í–´–ë–†–ê–ù–ù–û–ì–û –¶–ò–ö–õ–ê)
    // -----------------------------------------------------------
    let programsInSelectedCycle = [];
    if (state.selectedJournalCategory === 'all') {
        // –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–æ '–í—Å–µ —Ü–∏–∫–ª—ã', –±–µ—Ä–µ–º –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
        programsInSelectedCycle = state.journal.map(record => record.programName);
    } else {
        // –ò–Ω–∞—á–µ, –±–µ—Ä–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        programsInSelectedCycle = state.journal
            .filter(record => record.cycleName === state.selectedJournalCategory)
            .map(record => record.programName);
    }

    const allPrograms = [...new Set(programsInSelectedCycle)];

    if (allPrograms.length > 0) {
        const programFilter = createElement('div', 'category-filter sub-filter');
        programFilter.style.marginTop = '10px';

        const createProgramFilterButton = (name, value) => {
            const btn = createElement('button', `filter-btn ${state.selectedJournalProgram === value ? 'active' : ''}`, name);
            btn.addEventListener('click', () => {
                state.selectedJournalProgram = state.selectedJournalProgram === value ? '' : value;
                render();
            });
            return btn;
        };

        allPrograms.forEach(programName => {
            programFilter.append(createProgramFilterButton(programName, programName));
        });
        contentContainer.append(programFilter);
    }


    // -----------------------------------------------------------
    // –°–ü–ò–°–û–ö –ó–ê–ü–ò–°–ï–ô –ñ–£–†–ù–ê–õ–ê (–° –î–í–û–ô–ù–û–ô –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô)
    // -----------------------------------------------------------
    const journalList = createElement('div', 'journal-list list-section');

    let filteredJournal = state.journal;

    // –§–∏–ª—å—Ç—Ä –ø–æ —Ü–∏–∫–ª—É
    if (state.selectedJournalCategory && state.selectedJournalCategory !== 'all') {
        filteredJournal = filteredJournal.filter(record =>
            record.cycleName === state.selectedJournalCategory
        );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ
    if (state.selectedJournalProgram && state.selectedJournalProgram !== 'all') {
        filteredJournal = filteredJournal.filter(record =>
            record.programName === state.selectedJournalProgram
        );
    }

    if (filteredJournal.length === 0) {
        journalList.append(createElement('div', 'muted', '–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä–∞–º.'));
    } else {
        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏
        filteredJournal.sort((a, b) => {
            // –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç YYYY-MM-DD –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è Date
            const datePartsA = a.date.split('.');
            const formattedDateA = `${datePartsA[2]}-${datePartsA[1]}-${datePartsA[0]} ${a.time}`;
            const dateA = new Date(formattedDateA);

            const datePartsB = b.date.split('.');
            const formattedDateB = `${datePartsB[2]}-${datePartsB[1]}-${datePartsB[0]} ${b.time}`;
            const dateB = new Date(formattedDateB);

            return dateB - dateA;
        });

        filteredJournal.forEach(record => {
            const journalRecord = createElement('div', 'journal-record');
            journalRecord.dataset.id = record.id;

            const journalHeader = createElement('div', 'journal-header');
            const dateText = createElement('h4', null, `${record.date} –≤ ${record.time}`);

            const deleteBtn = createElement('button', 'btn delete-btn');
            deleteBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512"><title>Ios-trash-outline SVG Icon</title><path d="M400 113.3h-80v-20c0-16.2-13.1-29.3-29.3-29.3h-69.5C205.1 64 192 77.1 192 93.3v20h-80V128h21.1l23.6 290.7c0 16.2 13.1 29.3 29.3 29.3h141c16.2 0 29.3-13.1 29.3-29.3L379.6 128H400v-14.7zm-193.4-20c0-8.1 6.6-14.7 14.6-14.7h69.5c8.1 0 14.6 6.6 14.6 14.7v20h-98.7v-20zm135 324.6v.8c0 8.1-6.6 14.7-14.6 14.7H186c-8.1 0-14.6-6.6-14.6-14.7v-.8L147.7 128h217.2l-23.3 289.9z" fill="currentColor"/><path d="M249 160h14v241h-14z" fill="currentColor"/><path d="M320 160h-14.6l-10.7 241h14.6z" fill="currentColor"/><path d="M206.5 160H192l10.7 241h14.6z" fill="currentColor"/></svg>';

            deleteBtn.addEventListener('click', (e) => {
                e.stopPropagation();
                openConfirmModal("–£–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–ø–∏—Å—å –∏–∑ –¥–Ω–µ–≤–Ω–∏–∫–∞?", async () => {
                    await deleteDoc(doc(getUserJournalCollection(), record.id));
                });
            });



            journalHeader.append(dateText, deleteBtn);

            const programName = createElement('div', 'journal-program-name', `${record.programName}`);

            journalRecord.append(journalHeader, programName);

            // -----------------------------------------------------------
            // üî• –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø (–° –ù–£–ú–ï–†–ê–¶–ò–ï–ô)
            // -----------------------------------------------------------
            (record.exercises || []).forEach((exercise, index) => {
                const exerciseRow = createElement('div', 'journal-exercise-row');

                // –î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω—É–º–µ—Ä–∞—Ü–∏—è
                const exerciseName = createElement('div', 'journal-exercise-name', `${index + 1}. ${exercise.name}`);

                const setsContainer = createElement('div', 'journal-sets');

                (exercise.sets || []).forEach(set => {
                    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–≥–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö
                    if (set.weight || set.reps) {
                        const setSpan = createElement('span', null, `${set.weight || '0'}x${set.reps || '0'}`);
                        setsContainer.append(setSpan);
                    }
                });

                exerciseRow.append(exerciseName, setsContainer);

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
                if (exercise.note && exercise.note.trim() !== '') {
                    const noteDisplay = createElement('p', 'journal-exercise-note', exercise.note);
                    exerciseRow.append(noteDisplay);
                }

                journalRecord.append(exerciseRow);
            });

            // -----------------------------------------------------------
            // üî• –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –¢–†–ï–ù–ò–†–û–í–ö–ò
            // -----------------------------------------------------------
            const commentSection = createElement('div', 'comment-section');
            const commentText = createElement('p', 'comment-text', record.comment || '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ.');

            // –ï—Å–ª–∏ –µ—Å—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
            if (record.comment && record.comment.trim() !== '') {
                // –ö–Ω–æ–ø–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞
                const editCommentBtn = createElement('button', 'btn edit-comment-btn', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
                commentSection.append(commentText, editCommentBtn);

                editCommentBtn.addEventListener('click', () => {
                    // –°–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫—É
                    commentText.style.display = 'none';
                    editCommentBtn.style.display = 'none';

                    // –°–æ–∑–¥–∞–µ–º –ø–æ–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
                    const editInput = createElement('textarea', 'comment-edit-input');
                    editInput.value = record.comment || '';
                    editInput.placeholder = '–î–æ–±–∞–≤—å—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π...';

                    const saveBtn = createElement('button', 'btn btn-primary btn-small', '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å');
                    const cancelBtn = createElement('button', 'btn btn-secondary btn-small', '–û—Ç–º–µ–Ω–∞');

                    const controls = createElement('div', 'comment-edit-controls');
                    controls.append(saveBtn, cancelBtn);

                    commentSection.insertBefore(editInput, commentText);
                    commentSection.insertBefore(controls, commentText);

                    const stopEditing = () => {
                        editInput.remove();
                        controls.remove();
                        commentText.style.display = 'block';
                        editCommentBtn.style.display = 'block';
                    };

                    cancelBtn.addEventListener('click', stopEditing);

                    saveBtn.addEventListener('click', async () => {
                        const newComment = editInput.value.trim();
                        const journalRef = doc(getUserJournalCollection(), record.id);
                        try {
                            await updateDoc(journalRef, { comment: newComment });
                            showToast('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!');
                            stopEditing();
                            // Firebase listener –æ–±–Ω–æ–≤–∏—Ç state.journal –∏ –≤—ã–∑–æ–≤–µ—Ç render()
                        } catch (error) {
                            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è:', error);
                            showToast('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.');
                        }
                    });
                });
            } else {
                // –ï—Å–ª–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç
                commentSection.append(commentText);
            }

            // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ–∫—Ü–∏–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –∫–æ–Ω—Ü–µ –∑–∞–ø–∏—Å–∏ (–ø–æ—Å–ª–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)
            journalRecord.append(commentSection);

            journalList.append(journalRecord);
        });
    }

    contentContainer.append(journalList);
    root.append(contentContainer);
}


// =================================================================
// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø FIREBASE: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–ª–∞–Ω–∞ –¥–æ–±–∞–≤–æ–∫
// =================================================================
async function updateSupplementPlanInFirestore(newPlan) {
    const docRef = getSupplementPlanDocRef();
    if (!docRef) {
        showToast('–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω —Ü–∏–∫–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–æ–±–∞–≤–æ–∫.');
        return;
    }

    try {
        await updateDoc(docRef, { supplementPlan: newPlan });
        // showToast('–ü–ª–∞–Ω –¥–æ–±–∞–≤–æ–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!'); // –£–±—Ä–∞–ª–∏, —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å –ø—Ä–∏ –≤–≤–æ–¥–µ
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–ª–∞–Ω–∞ –¥–æ–±–∞–≤–æ–∫:", error);
        showToast('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–ª–∞–Ω–∞ –¥–æ–±–∞–≤–æ–∫. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ Firebase!');
    }
}

// üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ (–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è)
async function addSupplement(supplementName) {
    if (!state.supplementPlan) return;

    const newPlan = JSON.parse(JSON.stringify(state.supplementPlan));

    if (newPlan.supplements.includes(supplementName)) {
        showToast('–≠—Ç–æ—Ç –ø—Ä–µ–ø–∞—Ä–∞—Ç —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω!');
        return;
    }

    newPlan.supplements.push(supplementName);

    // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—ã–µ –ø–æ–ª—è –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –≤–æ –≤—Å–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∑–∞–ø–∏—Å–∏
    newPlan.data = newPlan.data.map(dayRecord => {
        dayRecord.doses = dayRecord.doses || {};
        dayRecord.doses[supplementName] = '';
        return dayRecord;
    });

    await updateSupplementPlanInFirestore(newPlan);
    showToast(`–ü—Ä–µ–ø–∞—Ä–∞—Ç "${supplementName}" –¥–æ–±–∞–≤–ª–µ–Ω!`);
}

// üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–µ–¥–µ–ª–∏ (7 –¥–Ω–µ–π)
async function addWeek() {
    const currentCycle = state.cycles.find(c => c.id === state.selectedCycleId);
    if (!currentCycle || !state.supplementPlan) return;

    const newPlan = JSON.parse(JSON.stringify(state.supplementPlan));
    const currentLength = newPlan.data.length;

    let nextStartDateString;
    if (currentLength > 0) {
        // –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é –¥–∞—Ç—É –∏ —Å–¥–≤–∏–≥–∞–µ–º –Ω–∞ 1 –¥–µ–Ω—å –≤–ø–µ—Ä–µ–¥
        const lastDateString = newPlan.data[currentLength - 1].date;
        const [startDay, startMonth, startYear] = lastDateString.split('.');
        const lastDate = new Date(`${startYear}-${startMonth}-${startDay}`);
        const nextStartDate = new Date(lastDate);
        nextStartDate.setDate(lastDate.getDate() + 1);

        const day = String(nextStartDate.getDate()).padStart(2, '0');
        const month = String(nextStartDate.getMonth() + 1).padStart(2, '0');
        const year = nextStartDate.getFullYear();
        nextStartDateString = `${day}.${month}.${year}`;
    } else {
        // –ï—Å–ª–∏ –ø–ª–∞–Ω –ø—É—Å—Ç–æ–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ —Ü–∏–∫–ª–∞
        nextStartDateString = currentCycle.startDateString;
    }

    const newDates = generateDates(nextStartDateString, 7);
    const newRecords = newDates.map(dateInfo => {
        const doseMap = {};
        // –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
        newPlan.supplements.forEach(supName => {
            doseMap[supName] = '';
        });

        return {
            date: dateInfo.date,
            dayOfWeek: dateInfo.dayOfWeek,
            doses: doseMap
        };
    });

    newPlan.data.push(...newRecords);

    // –ï—Å–ª–∏ –ø–ª–∞–Ω –±—ã–ª –ø—É—Å—Ç–æ–π, –Ω–∞–º –Ω—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å state.supplementPlan –ø–µ—Ä–µ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    // —á—Ç–æ–±—ã onSnapshot –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é, –Ω–æ –≤ –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å.
    await updateSupplementPlanInFirestore(newPlan);
}

// –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–æ–∑–∏—Ä–æ–≤–∫–∏
const debouncedSaveDoseData = debounce(async (supName, dayIndex, value) => {
    const newPlan = JSON.parse(JSON.stringify(state.supplementPlan));

    if (newPlan && newPlan.data[dayIndex]) {
        // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ doses —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        newPlan.data[dayIndex].doses = newPlan.data[dayIndex].doses || {};
        newPlan.data[dayIndex].doses[supName] = value;
        await updateSupplementPlanInFirestore(newPlan);
    }
}, 700);

// üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ (7 –¥–Ω–µ–π)
async function removeLastWeek() {
    if (!state.supplementPlan || state.supplementPlan.data.length === 0) {
        showToast('–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.');
        return;
    }

    const newPlan = JSON.parse(JSON.stringify(state.supplementPlan));

    // –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –∑–∞–ø–∏—Å–µ–π
    newPlan.data.splice(Math.max(0, newPlan.data.length - 7));

    await updateSupplementPlanInFirestore(newPlan);
    showToast('–ü–æ—Å–ª–µ–¥–Ω—è—è –Ω–µ–¥–µ–ª—è —É–¥–∞–ª–µ–Ω–∞.');
}


// =================================================================
// üîÑ –ì–ï–ù–ï–†–ê–¶–ò–Ø –ü–û–õ–ù–û–ì–û HTML-–ö–û–ù–¢–ï–ù–¢–ê –û–¢–ß–ï–¢–ê (–° –§–ò–õ–¨–¢–†–ê–¶–ò–ï–ô –ü–†–û–ì–†–ê–ú–ú)
// =================================================================
function generateCycleReportHtml(
    currentCycle,
    startDateString,
    endDateString
) {
    const planData = state.supplementPlan || { supplements: [], data: [] };

    // 1. –§–ò–õ–¨–¢–†–ê–¶–ò–Ø –ü–õ–ê–ù–ê –î–û–ë–ê–í–û–ö –ü–û –î–ê–¢–ê–ú
    const parseDate = (dateString) => new Date(dateString.split('.').reverse().join('-'));
    const start = parseDate(startDateString);
    const end = parseDate(endDateString);
    end.setHours(23, 59, 59, 999);

    const filteredSupplementsData = planData.data.filter(dayRecord => {
        const recordDate = parseDate(dayRecord.date);
        return recordDate >= start && recordDate <= end;
    });

    // 2. –ü–†–û–í–ï–†–ö–ê –ù–ê–õ–ò–ß–ò–Ø –î–ê–ù–ù–´–•
    if (filteredSupplementsData.length === 0) {
        showToast('–í –≤—ã–±—Ä–∞–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–æ–±–∞–≤–∫–∞–º.');
        return null;
    }

    // -----------------------------------------------------------
    // 3. –°–û–ó–î–ê–ù–ò–ï HTML-–ö–û–ù–¢–ï–ù–¢–ê (–¢–û–õ–¨–ö–û –ë–ê–î–´)
    // -----------------------------------------------------------

    let contentHtml = `
        <h1 style="color: #333; border-bottom: 3px solid #007bff; padding-bottom: 10px; font-size: 1.5em; text-align: center;">–û—Ç—á–µ—Ç –ø–æ –¥–æ–±–∞–≤–∫–∞–º: ${currentCycle.name}</h1>
        <p class="pdf-date-range" style="font-size: 1em; margin-bottom: 30px; text-align: center;">–ü–µ—Ä–∏–æ–¥: ${startDateString} ‚Äî ${endDateString}</p>
    `;

    // –ë–õ–û–ö –ë–ê–î–û–í (–ö–ê–õ–ï–ù–î–ê–†–¨)
    contentHtml += createSupplementsCalendarHtml(planData, filteredSupplementsData);

    // üî• –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–æ–ª–Ω—ã–π HTML-–¥–æ–∫—É–º–µ–Ω—Ç (–û—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π)
// üî• –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–æ–ª–Ω—ã–π HTML-–¥–æ–∫—É–º–µ–Ω—Ç –∏ **–≤—Å—Ç–∞–≤–ª—è–µ–º –º–æ–±–∏–ª—å–Ω—ã–µ —Å—Ç–∏–ª–∏**
    const fullHtml = `
        <!DOCTYPE html>
        <html>
        <head>
            <meta charset="UTF-8">
            <title>–û—Ç—á–µ—Ç: ${currentCycle.name}</title>
            <style>
                /* –°—Ç–∏–ª–∏ –¥–ª—è –ø–µ—á–∞—Ç–∏ (–≤–∑—è—Ç—ã –∏–∑ –Ω–∞—à–∏—Ö –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏) */
                body { 
                    margin: 0; 
                    padding: 10px; 
                    font-family: Arial, sans-serif; 
                    background-color: #fff; 
                    width: 100%; 
                    box-sizing: border-box;
                    font-size: 11px; 
                    line-height: 1.3;
                }
                .pdf-report-container { width: 100%; margin: 0 auto; }
                h1, h2, h3, h4 { page-break-after: avoid; margin-top: 10px; margin-bottom: 5px; }
                h1 { font-size: 1.6em; }
                h3 { font-size: 1.2em; color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px; }
                h4 { font-size: 1em; color: #007bff; margin: 0 0 5px 0; }
                
                table { width: 100%; border-collapse: collapse; margin-top: 5px; table-layout: auto; }
                th, td { border: 1px solid #ccc; padding: 3px; text-align: center; vertical-align: top; box-sizing: border-box; }
                th { background-color: #e9ecef; font-weight: 600; }

                /* –°—Ç–∏–ª–∏ –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã –¥–æ–±–∞–≤–æ–∫ */
                .pdf-calendar-table { font-size: 0.7em; }
                .pdf-calendar-table th, .pdf-calendar-table td {
                    padding: 2px; min-width: 40px; max-width: 60px; word-break: break-word; line-height: 1.1;
                }
                .pdf-calendar-table th:first-child, .pdf-calendar-table td:first-child { 
                    min-width: 50px; max-width: 50px; font-size: 0.8em; padding: 3px 1px;
                }
                .pdf-calendar-table th:nth-child(2), .pdf-calendar-table td:nth-child(2) { 
                    min-width: 30px; max-width: 30px; font-weight: bold;
                }
                .supplement-table-wrapper:not(:first-child) { margin-top: 15px; page-break-before: auto; }

                /* –°—Ç–∏–ª–∏ –¥–ª—è –¥–Ω–µ–≤–Ω–∏–∫–∞ –∏ –ø—Ä–æ–≥—Ä–∞–º–º */
                .journal-record-block, .program-block { page-break-inside: avoid; margin-top: 15px; border: 1px solid #ddd; border-radius: 5px; padding: 5px; } 
                .report-journal-table th, .report-journal-table td,
                .report-program-table th, .report-program-table td {
                    font-size: 0.8em; padding: 4px;
                }
                .report-journal-table td:nth-child(1) { width: 55%; text-align: left; }
                .report-journal-table td:nth-child(2) { width: 45%; white-space: pre-wrap; }
                .report-program-table td:nth-child(1) { width: 70%; text-align: left; }
                .report-program-table td:nth-child(2) { width: 30%; }

                .journal-comment { font-size: 0.8em; color: #555; margin: 5px 0 0 0; padding-left: 10px; border-left: 3px solid #007aff; }

                /* –ü–ï–ß–ê–¢–¨ (PDF) */
                @media print {
                    body { font-size: 9pt; padding: 0; }
                    .pdf-calendar-table th, .pdf-calendar-table td { font-size: 7pt; padding: 1pt; }
                    .report-journal-table th, .report-journal-table td,
                    .report-program-table th, .report-program-table td { font-size: 8pt; padding: 2pt; }
                    .journal-comment { font-size: 8pt; }
                    .pdf-report-container > h1 { margin-top: 0; }
                }
            </style>
        </head>
        <body>
            <div class="pdf-report-container">
                ${contentHtml}
            </div>
        </body>
        </html>
    `;

    return fullHtml;
}
// =================================================================
// ‚öôÔ∏è –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –û–ü–¶–ò–ô –û–¢–ß–ï–¢–ê –ü–û –ë–ê–î–ê–ú (–° –í–´–ë–û–†–û–ú –ü–†–û–ì–†–ê–ú–ú)
// =================================================================

function openSupplementsPdfOptionsModal(cycleId, planData) {
    const root = document.getElementById('root');
    const overlay = createElement('div', 'modal-overlay', '');
    overlay.classList.add('active'); // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–≤–µ—Ä–ª–µ–π —Å—Ä–∞–∑—É

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–µ–∫—É—â–µ–≥–æ —Ü–∏–∫–ª–∞ –¥–ª—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ —Ä–µ–Ω–¥–µ—Ä–∞
    const programsInCycle = planData.programsInCycle || [];

    const modalContent = createElement('div', 'modal-content modal-compact');

    // --- –ó–ê–ì–û–õ–û–í–û–ö ---
    modalContent.appendChild(createElement('div', 'modal-title', '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –û—Ç—á–µ—Ç–∞ –ø–æ –ë–ê–î–∞–º'));

    // --- 1. –û–ü–¶–ò–Ø –í–ö–õ–Æ–ß–ï–ù–ò–Ø/–ò–°–ö–õ–Æ–ß–ï–ù–ò–Ø –¢–†–ï–ù–ò–†–û–í–û–ö ---
    const programsToggleGroup = createElement('div', 'checkbox-group');
    programsToggleGroup.style.marginBottom = '15px';
    programsToggleGroup.innerHTML = `
        <label style="display: flex; align-items: center; justify-content: space-between; font-size: 16px;">
            –í–∫–ª—é—á–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –≤ –æ—Ç—á–µ—Ç
            <input type="checkbox" id="include-programs-toggle" checked style="width: 18px; height: 18px;">
        </label>
    `;
    modalContent.appendChild(programsToggleGroup);

    // --- 2. –ö–û–ù–¢–ï–ô–ù–ï–† –î–õ–Ø –í–´–ë–û–†–ê –ö–û–ù–ö–†–ï–¢–ù–´–• –ü–†–û–ì–†–ê–ú–ú ---
    const programsSelectionContainer = createElement('div', 'programs-selection-container');
    programsSelectionContainer.style.borderTop = '1px solid #ccc';
    programsSelectionContainer.style.paddingTop = '10px';
    programsSelectionContainer.style.maxHeight = '200px'; // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≤—ã—Å–æ—Ç—ã –¥–ª—è —Å–∫—Ä–æ–ª–ª–∞
    programsSelectionContainer.style.overflowY = 'auto';


    // 2.1. –ß–ï–ö–ë–û–ö–° "–í–´–ë–†–ê–¢–¨ –í–°–ï"
    if (programsInCycle.length > 0) {
        programsSelectionContainer.innerHTML = `
            <label style="display: flex; align-items: center; margin-bottom: 8px; font-weight: 600;">
                <input type="checkbox" id="select-all-programs" checked style="width: 16px; height: 16px; margin-right: 10px;">
                –í—ã–±—Ä–∞—Ç—å –≤—Å–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã
            </label>
        `;
    }

    // 2.2. –°–ü–ò–°–û–ö –ü–†–û–ì–†–ê–ú–ú
    programsInCycle.forEach(program => {
        const checkboxId = `program-checkbox-${program.id}`;
        const programItem = createElement('div', null, `
            <label style="display: flex; align-items: center; margin-left: 20px; margin-bottom: 5px;">
                <input type="checkbox" class="program-select-checkbox" data-program-id="${program.id}" checked style="width: 16px; height: 16px; margin-right: 10px;">
                ${program.name}
            </label>
        `);
        programsSelectionContainer.appendChild(programItem);
    });

    if (programsInCycle.length === 0) {
        programsSelectionContainer.innerHTML = '<p style="font-size: 14px; color: #888;">–ù–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ.</p>';
    }

    modalContent.appendChild(programsSelectionContainer);

    // --- 3. –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    const controls = createElement('div', 'modal-controls', '');
    const cancelBtn = createElement('button', 'btn', '–û—Ç–º–µ–Ω–∞');
    cancelBtn.onclick = () => overlay.remove();

    const generateBtn = createElement('button', 'btn btn-primary', '–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å PDF');
    generateBtn.onclick = () => {

        const includePrograms = document.getElementById('include-programs-toggle').checked;
        let selectedProgramIds = [];

        if (includePrograms) {
            // –°–æ–±–∏—Ä–∞–µ–º ID —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–º–µ—á–µ–Ω—ã
            selectedProgramIds = Array.from(document.querySelectorAll('.program-select-checkbox:checked'))
                .map(checkbox => checkbox.dataset.programId);

            // –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω—ã, –Ω–æ –Ω–∏ –æ–¥–Ω–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
            if (programsInCycle.length > 0 && selectedProgramIds.length === 0) {
                showToast('–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–æ–≥—Ä–∞–º–º—É –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç–µ –≤—ã–≤–æ–¥ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫.', 'error');
                return;
            }
        }

        overlay.remove();

        // üî• –í—ã–∑—ã–≤–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ —Å –Ω–æ–≤—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        generateCycleReport(
            cycleId,
            planData,
            true, // includeSupplements - –í—Å–µ–≥–¥–∞ true –¥–ª—è —ç—Ç–æ–π –º–æ–¥–∞–ª–∫–∏
            includePrograms,
            selectedProgramIds // –ü–µ—Ä–µ–¥–∞–µ–º –º–∞—Å—Å–∏–≤ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö ID
        );
    };

    controls.appendChild(cancelBtn);
    controls.appendChild(generateBtn);
    modalContent.appendChild(controls);
    overlay.appendChild(modalContent);
    root.appendChild(overlay);

    // --- –õ–û–ì–ò–ö–ê –ß–ï–ö–ë–û–ö–°–û–í ---
    const toggle = document.getElementById('include-programs-toggle');
    const selectAll = document.getElementById('select-all-programs');
    const checkboxes = document.querySelectorAll('.program-select-checkbox');

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º
    const updateVisibility = () => {
        programsSelectionContainer.style.display = toggle.checked ? 'block' : 'none';
        generateBtn.disabled = toggle.checked && programsInCycle.length > 0 && Array.from(checkboxes).filter(c => c.checked).length === 0;
    };

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ "–í—ã–±—Ä–∞—Ç—å –≤—Å–µ"
    if (selectAll) {
        selectAll.addEventListener('change', () => {
            checkboxes.forEach(c => c.checked = selectAll.checked);
            updateVisibility();
        });
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–∏–Ω–æ—á–Ω—ã—Ö —á–µ–∫–±–æ–∫—Å–æ–≤
    checkboxes.forEach(c => {
        c.addEventListener('change', () => {
            if (selectAll && !c.checked) {
                selectAll.checked = false;
            } else if (selectAll && Array.from(checkboxes).every(cb => cb.checked)) {
                selectAll.checked = true;
            }
            updateVisibility();
        });
    });

    toggle.addEventListener('change', updateVisibility);

    updateVisibility(); // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–∏–¥–∏–º–æ—Å—Ç–∏
}



// =================================================================
// üåü –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–ï–ù–î–ï–† –°–í–û–î–ù–û–ì–û HTML-–û–¢–ß–ï–¢–ê –î–õ–Ø –ü–ï–ß–ê–¢–ò
// =================================================================
function renderCycleReportPage(htmlContent) {
    const root = document.getElementById('root');
    root.innerHTML = '';

    const contentContainer = document.createElement('div');
    contentContainer.id = 'cycle-report-content';
    contentContainer.className = 'report-page-container';

    // –ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥
    const backButton = createElement('button', 'btn back-btn', '‚Üê –ù–∞–∑–∞–¥ –∫ –ë–ê–î–∞–º');
    backButton.addEventListener('click', () => {
        state.currentPage = 'supplements';
        render();
    });

    // –ö–Ω–æ–ø–∫–∞ –ø–µ—á–∞—Ç–∏
    const printButton = createElement('button', 'btn btn-primary print-btn', 'üñ®Ô∏è –ü–µ—á–∞—Ç—å / –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–∞–∫ PDF');
    printButton.addEventListener('click', () => {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –æ—Ç—á–µ—Ç –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ –¥–ª—è –ø–µ—á–∞—Ç–∏
        const printWindow = window.open('', '_blank');
        printWindow.document.write(htmlContent);
        printWindow.document.close();
        printWindow.print(); // –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—á–∞—Ç—å
        // –ü–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞ –ø–µ—á–∞—Ç–∏ –æ–Ω–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–∫—Ä—ã—Ç–æ, –∏–ª–∏ –æ—Å—Ç–∞–≤–ª–µ–Ω–æ.
    });

    const header = createElement('div', 'report-header-controls');
    header.append(backButton, printButton);
    contentContainer.append(header);

    // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä, –∫—É–¥–∞ –±—É–¥–µ—Ç –≤—Å—Ç–∞–≤–ª–µ–Ω —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π HTML
    const reportDisplay = createElement('div', 'report-html-display');
    reportDisplay.innerHTML = htmlContent;

    contentContainer.append(reportDisplay);
    root.append(contentContainer);

    // –í–∞–∂–Ω–æ: –û—Ç–∫–ª—é—á–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é, –ø–æ–∫–∞ –Ω–∞—Ö–æ–¥–∏–º—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –ø–µ—á–∞—Ç–∏
    document.querySelector('.navigation').style.display = 'none';
}
// =================================================================
// ‚öôÔ∏è –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –î–õ–Ø –û–ü–¶–ò–ô –û–¢–ß–ï–¢–ê
// =================================================================
// –í–Ω–∏–º–∞–Ω–∏–µ: –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ç—Ä–µ–±—É–µ—Ç –Ω–∞–ª–∏—á–∏—è div#modal-overlay –≤ –≤–∞—à–µ–º HTML
function openPdfOptionsModal(callback) {
    const modal = document.getElementById('modal-overlay');
    if (!modal) {
        // –ï—Å–ª–∏ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤—ã–∑—ã–≤–∞–µ–º –∫–æ–ª–±—ç–∫ —Å–æ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏ –≤—ã—Ö–æ–¥–∏–º
        callback(true, true);
        return;
    }

    modal.innerHTML = `
        <div class="modal-content">
            <h3>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç—á–µ—Ç–∞</h3>
            <p>–ö–∞–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤–∫–ª—é—á–∏—Ç—å –≤ —Å–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç?</p>
            <div style="margin: 15px 0;">
                <label style="display: block; margin-bottom: 10px; font-weight: bold;">
                    <input type="checkbox" id="include-supplements" checked disabled style="margin-right: 10px;">
                    –ü–ª–∞–Ω –ø—Ä–∏–µ–º–∞ –ë–ê–î–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
                </label>
                <label style="display: block; margin-bottom: 10px;">
                    <input type="checkbox" id="include-journal" checked style="margin-right: 10px;">
                    –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–î–Ω–µ–≤–Ω–∏–∫)
                </label>
                <label style="display: block; margin-bottom: 10px;">
                    <input type="checkbox" id="include-programs" style="margin-right: 10px;">
                    –¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω (–®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º)
                </label>
            </div>
            <div class="modal-controls">
                <button id="modal-cancel-btn" class="btn btn-secondary">–û—Ç–º–µ–Ω–∞</button>
                <button id="modal-generate-btn" class="btn btn-primary">–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç</button>
            </div>
        </div>
    `;

    modal.style.display = 'flex';

    document.getElementById('modal-cancel-btn').addEventListener('click', () => {
        modal.style.display = 'none';
    });

    document.getElementById('modal-generate-btn').addEventListener('click', () => {
        const includeJournal = document.getElementById('include-journal').checked;
        const includePrograms = document.getElementById('include-programs').checked;
        modal.style.display = 'none';

        // –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–ª–±—ç–∫ —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
        callback(includePrograms, includeJournal);
    });
}
// =================================================================
// üé® –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ì–ï–ù–ï–†–ê–¶–ò–Ø HTML-–°–í–û–î–ö–ò –î–ù–ï–í–ù–ò–ö–ê
// =================================================================
function createJournalSummaryHtml(journalData, startDateString, endDateString) {
    if (!journalData || journalData.length === 0) {
        return `
            <div style="margin-bottom: 20px;">
                <h3 style="color: #6c757d; border-bottom: 1px solid #ccc; padding-bottom: 5px;">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–î–Ω–µ–≤–Ω–∏–∫)</h3>
                <p style="text-align: center; color: #888;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</p>
            </div>
        `;
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã (–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è –∏–∑ downloadCycleReportPDF)
    const parseDate = (dateString) => new Date(dateString.split('.').reverse().join('-'));

    const start = parseDate(startDateString);
    const end = parseDate(endDateString);
    end.setHours(23, 59, 59, 999);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –¥–Ω–µ–≤–Ω–∏–∫–∞ –ø–æ –¥–∞—Ç–∞–º
    const filteredJournal = journalData.filter(record => {
        const recordDate = parseDate(record.date);
        return recordDate >= start && recordDate <= end;
    });

    if (filteredJournal.length === 0) {
        return `
            <div style="margin-bottom: 20px;">
                <h3 style="color: #6c757d; border-bottom: 1px solid #ccc; padding-bottom: 5px;">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–î–Ω–µ–≤–Ω–∏–∫)</h3>
                <p style="text-align: center; color: #888;">–ù–µ—Ç –∑–∞–ø–∏—Å–µ–π –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ (${startDateString} ‚Äì ${endDateString}).</p>
            </div>
        `;
    }

    let html = `
        <div class="pdf-journal-section" style="margin-top: 40px; page-break-before: always;">
            <h3 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px; font-size: 1.2em;">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ (–î–Ω–µ–≤–Ω–∏–∫)</h3>
    `;

    filteredJournal.forEach(record => {
        html += `
            <div class="journal-record-block" style="margin-top: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; background-color: #f9f9f9;">
                <h4 style="color: #007bff; margin: 0 0 10px 0; font-size: 1.1em;">
                    –î–∞—Ç–∞: ${record.date} ${record.dayOfWeek ? `(${record.dayOfWeek})` : ''} ‚Äî ${record.programName || '–ë–µ–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã'}
                </h4>
        `;

        // –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
        if (record.exercises && record.exercises.length > 0) {
            html += `
                <table class="report-journal-table" style="width: 100%; border-collapse: collapse; margin-bottom: 15px; font-size: 0.85em;">
                    <thead>
                        <tr style="background-color: #e9ecef;">
                            <th style="width: 45%; padding: 5px; border: 1px solid #ccc; text-align: left;">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</th>
                            <th style="width: 55%; padding: 5px; border: 1px solid #ccc;">–ü–æ–¥—Ö–æ–¥—ã –∏ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è (–í–µ—Å x –ü–æ–≤—Ç–æ—Ä)</th>
                        </tr>
                    </thead>
                    <tbody>
            `;
            record.exercises.forEach((exercise, index) => {
                const setsHtml = (exercise.sets || [])
                    .map(set => `${set.weight || '‚Äî'}x${set.reps || '‚Äî'}`)
                    .join(' / ');

                html += `
                    <tr>
                        <td style="padding: 5px; border: 1px solid #ccc; text-align: left;">${index + 1}. ${exercise.name}</td>
                        <td style="padding: 5px; border: 1px solid #ccc; text-align: center;">${setsHtml}</td>
                    </tr>
                `;

                // –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—é
                if (exercise.note && exercise.note.trim() !== '') {
                    html += `
                        <tr>
                            <td colspan="2" style="padding: 2px 5px 5px 25px; border: 1px solid #ccc; text-align: left; background-color: #f1f1f1; font-style: italic; font-size: 0.9em;">
                                * –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${exercise.note}
                            </td>
                        </tr>
                    `;
                }
            });
            html += `
                    </tbody>
                </table>
            `;
        } else {
            html += `<p style="margin: 5px 0 15px 0; font-style: italic; color: #555;">(–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –±–µ–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)</p>`;
        }

        // –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–µ
        if (record.comment && record.comment.trim() !== '') {
            html += `<p style="margin: 5px 0 0 0; font-weight: bold; font-size: 0.9em;">–û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:</p>`;
            html += `<p style="margin: 0 0 5px 0; font-style: italic; color: #444; background-color: #fff; padding: 5px; border-radius: 3px;">${record.comment}</p>`;
        }


        html += `</div>`; // .journal-record-block
    });

    html += `</div>`; // .pdf-journal-section
    return html;
}





function createSupplementsCalendarHtml(planData, filteredSupplementsData) {
    if (planData.supplements.length === 0 || filteredSupplementsData.length === 0) {
        return `
            <div style="margin-bottom: 20px;">
                <h3 style="color: #6c757d; border-bottom: 1px solid #ccc; padding-bottom: 5px;">–ü–ª–∞–Ω –ø—Ä–∏–µ–º–∞ –ë–ê–î–æ–≤</h3>
                <p style="text-align: center; color: #888;">–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –ø—Ä–∏–µ–º—É –¥–æ–±–∞–≤–æ–∫ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.</p>
            </div>
        `;
    }

    const supplementNames = planData.supplements.map(name => {
        return typeof name === 'object' && name.name ? name.name : name;
    });

    // üî• –ù–û–í–´–ô –ü–ê–†–ê–ú–ï–¢–†: –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –ö–û–õ–ò–ß–ï–°–¢–í–û –°–¢–û–õ–ë–¶–û–í –ù–ê –≠–ö–†–ê–ù (–¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ)
    const MAX_COLUMNS_PER_TABLE = 5;
    let finalHtml = `
        <div class="pdf-supplements-section" style="margin-top: 20px;">
            <h3 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px; font-size: 1.2em;">–ü—Ä–∏–µ–º –¥–æ–±–∞–≤–æ–∫ (–ö–∞–ª–µ–Ω–¥–∞—Ä—å)</h3>
    `;

    // –¶–∏–∫–ª –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã –Ω–∞ —á–∞—Å—Ç–∏
    for (let i = 0; i < supplementNames.length; i += MAX_COLUMNS_PER_TABLE) {
        const chunkedNames = supplementNames.slice(i, i + MAX_COLUMNS_PER_TABLE);
        const isFirstTable = i === 0;

        // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —á–∞–Ω–∫–∞
        const headerHtml = chunkedNames.map(supName =>
            `<th style="min-width: 40px; font-size: 0.9em; text-align: center;">${supName}</th>`
        ).join('');

        finalHtml += `
            <div class="supplement-table-wrapper" style="overflow-x: auto; margin-top: ${isFirstTable ? '0' : '20px'};">
                ${!isFirstTable ? `<p style="margin: 0; font-size: 0.9em; color: #555;">(–ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ–±–∞–≤–æ–∫)</p>` : ''}
                <table class="pdf-calendar-table" style="min-width: 100%; table-layout: fixed; width: auto;">
                    <thead>
                        <tr style="background-color: #f1f1f1;">
                            <th style="min-width: 55px;">–î–∞—Ç–∞</th>
                            <th style="min-width: 30px;">–î–µ–Ω—å</th>
                            ${headerHtml}
                        </tr>
                    </thead>
                    <tbody>
        `;

        // –¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã
        filteredSupplementsData.forEach(dayRecord => {
            finalHtml += `
                <tr>
                    <td style="font-weight: bold; background-color: #f8f8f8;">${formatDayAndMonth(dayRecord.date)}</td>
                    <td>${dayRecord.dayOfWeek || '‚Äî'}</td>
                    
                    ${chunkedNames.map(supName => {
                const dose = dayRecord.doses && dayRecord.doses[supName] ? dayRecord.doses[supName] : '';
                return `<td style="font-size: 0.9em;">${dose || '‚Äî'}</td>`;
            }).join('')}
                </tr>
            `;
        });

        finalHtml += `
                    </tbody>
                </table>
            </div>
        `;
    } // –ö–æ–Ω–µ—Ü —Ü–∏–∫–ª–∞ for

    finalHtml += `</div>`; // .pdf-supplements-section

    return finalHtml;
}


// =================================================================
// 4. –ì–ï–ù–ï–†–ê–¶–ò–Ø HTML –î–õ–Ø –û–¢–ß–ï–¢–ê (–ò–°–ü–†–ê–í–õ–ï–ù–û)
// =================================================================

function createProgramsHtml(programsInCycle) {
    if (!programsInCycle || programsInCycle.length === 0) {
        return `
            <div style="margin-top: 20px; page-break-before: auto;">
                <h3 style="color: #6c757d; border-bottom: 1px solid #ccc; padding-bottom: 5px;">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω (–®–∞–±–ª–æ–Ω—ã)</h3>
                <p style="text-align: center; color: #888;">–ù–µ—Ç –ø—Ä–æ–≥—Ä–∞–º–º –≤ —Ç–µ–∫—É—â–µ–º —Ü–∏–∫–ª–µ.</p>
            </div>
        `;
    }

    let html = `
        <div class="pdf-programs-section" style="margin-top: 40px; page-break-before: always;">
            <h3 style="color: #333; border-bottom: 2px solid #007bff; padding-bottom: 5px; font-size: 1.2em;">–¢—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –ø–ª–∞–Ω (–®–∞–±–ª–æ–Ω—ã –ø—Ä–æ–≥—Ä–∞–º–º)</h3>
    `;

    programsInCycle.forEach(program => {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê: –∏—Å–ø–æ–ª—å–∑—É–µ–º program.exercises?.length
        const hasExercises = program.exercises && program.exercises.length > 0;

        html += `
            <div class="program-block" style="margin-top: 20px; padding: 10px; border: 1px solid #ddd; border-radius: 5px; background-color: #f9f9f9; page-break-inside: avoid;">
                <h4 style="color: #007bff; margin: 0 0 10px 0; font-size: 1.1em;">${program.name}</h4>
                <p style="margin: 0 0 5px 0;">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ${program.comment || '‚Äî'}</p>
                
                ${hasExercises ? `
                    <table class="report-program-table" style="width: 100%; border-collapse: collapse; margin-top: 10px; font-size: 0.85em;">
                        <thead>
                            <tr style="background-color: #e9ecef;">
                                <th style="width: 70%; padding: 5px; border: 1px solid #ccc; text-align: left;">–£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ</th>
                                <th style="width: 30%; padding: 5px; border: 1px solid #ccc;">–ü–æ–¥—Ö–æ–¥—ã x –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏—è</th>
                            </tr>
                        </thead>
                        <tbody>
                            ${program.exercises.map(ex => ` 
                                <tr>
                                    <td style="padding: 5px; border: 1px solid #ccc; text-align: left;">${ex.name}</td>
                                    <td style="padding: 5px; border: 1px solid #ccc; text-align: center;">${ex.sets || '‚Äî'}x${ex.reps || '‚Äî'}</td>
                                </tr>
                            `).join('')}
                        </tbody>
                    </table>
                ` : '<p style="margin-top: 10px; font-style: italic; color: #555;">(–ü—Ä–æ–≥—Ä–∞–º–º–∞ –±–µ–∑ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)</p>'}
            </div>
        `; // .program-block
    });

    html += `</div>`; // .pdf-programs-section
    return html;
}

// =================================================================
// üåü –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–ï–ù–î–ï–† –ü–õ–ê–ù–ê –ë–ê–î–û–í/–î–û–ë–ê–í–û–ö (–û–±–Ω–æ–≤–ª–µ–Ω–∞)
// =================================================================
function renderSupplementsPage() {
    const currentCycle = state.cycles.find(c => c.id === state.selectedCycleId);

    const contentContainer = document.createElement('div');
    contentContainer.id = 'supplements-content';
    contentContainer.className = 'supplements-page';

    if (!currentCycle) {
        contentContainer.append(createElement('h3', null, '–ü–ª–∞–Ω –ø—Ä–∏–µ–º–∞ –ë–ê–î–æ–≤'));
        contentContainer.append(createElement('div', 'muted', '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ü—Ä–æ–≥—Ä–∞–º–º—ã" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞–Ω–∞ –ø—Ä–∏–µ–º–∞ –¥–æ–±–∞–≤–æ–∫.'));
        root.append(contentContainer);
        return;
    }

    const backButtonText = '‚Üê –ö –ø—Ä–æ–≥—Ä–∞–º–º–∞–º —Ü–∏–∫–ª–∞';
    const backButton = createElement('button', 'btn back-btn', backButtonText);

    backButton.addEventListener('click', () => {
        state.currentPage = 'programsInCycle';
        render();
    });
    contentContainer.append(backButton);

    contentContainer.append(createElement('h3', null, `–ü–ª–∞–Ω –¥–æ–±–∞–≤–æ–∫: ${currentCycle.name}`));

    // -----------------------------------------------------------
    // üî• –ë–õ–û–ö –£–ü–†–ê–í–õ–ï–ù–ò–Ø –ü–†–ï–ü–ê–†–ê–¢–ê–ú–ò, –î–ê–¢–ê–ú–ò –ò PDF
    // -----------------------------------------------------------

    const controlsWrapper = createElement('div', 'supplements-controls-wrapper');

    // –ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ +/- –ù–µ–¥–µ–ª—è
    const weekControlsGroup = createElement('div', 'week-controls-group');

    // 1. –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–µ–ø–∞—Ä–∞—Ç" —Å –º–æ–¥–∞–ª—å–Ω—ã–º –æ–∫–Ω–æ–º
    const addSupplementBtn = createElement('button', 'btn btn-primary', '‚ûï –ü—Ä–µ–ø–∞—Ä–∞—Ç');
    weekControlsGroup.append(addSupplementBtn);

    addSupplementBtn.addEventListener('click', () => {
        // –û—Ç–∫—Ä—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
        openCommentModal(
            'new-supplement',
            '',
            '–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞',
            async (name) => {
                if (name) {
                    await addSupplement(name);
                } else {
                    showToast('–ù–∞–∑–≤–∞–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
                }
            }
        );
    });

    // –ö–Ω–æ–ø–∫–∏ +/- –ù–µ–¥–µ–ª—è
    const removeWeekBtn = createElement('button', 'btn btn-secondary', '‚Äì');
    removeWeekBtn.addEventListener('click', removeLastWeek);

    const weekLabel = createElement('span', 'week-label', '–ù–µ–¥–µ–ª—è');

    const addWeekBtn = createElement('button', 'btn btn-secondary', '+');
    addWeekBtn.addEventListener('click', addWeek);

    weekControlsGroup.append(removeWeekBtn, weekLabel, addWeekBtn);


    // üî• –ù–û–í–´–ô –ë–õ–û–ö: –£–ü–†–ê–í–õ–ï–ù–ò–ï PDF –ò –î–ê–¢–ê–ú–ò
    const pdfControls = createElement('div', 'pdf-controls-group');

    // –í–´–ë–û–† –î–ê–¢: –ò—Å–ø–æ–ª—å–∑—É–µ–º local storage –¥–ª—è –∑–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–±–æ—Ä–∞
    const defaultStartDate = currentCycle.startDateString;
    const defaultEndDate = getTodayDateString();

    // –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞—Ç—ã –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –æ–Ω–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    let savedStartDate = localStorage.getItem('pdf_start_date') || defaultStartDate;
    let savedEndDate = localStorage.getItem('pdf_end_date') || defaultEndDate;

    // –ï—Å–ª–∏ –≤ localStorage —Å–æ—Ö—Ä–∞–Ω–∏–ª–∏—Å—å –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD (–ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è), –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∏—Ö –æ–±—Ä–∞—Ç–Ω–æ
    if (savedStartDate.includes('-')) {
        savedStartDate = savedStartDate.split('-').reverse().join('.');
    }
    if (savedEndDate.includes('-')) {
        savedEndDate = savedEndDate.split('-').reverse().join('.');
    }

    const startDateInput = createElement('input', 'date-filter-input');
    startDateInput.type = 'date';
    startDateInput.value = dateToInputFormat(savedStartDate);
    startDateInput.title = '–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ—Ç—á–µ—Ç–∞';

    const endDateInput = createElement('input', 'date-filter-input');
    endDateInput.type = 'date';
    endDateInput.value = dateToInputFormat(savedEndDate);
    endDateInput.title = '–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞';

    // –°–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±–æ—Ä–∞ (—Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì)
    startDateInput.addEventListener('change', (e) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –≤ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        localStorage.setItem('pdf_start_date', e.target.value.split('-').reverse().join('.'));
    });
    endDateInput.addEventListener('change', (e) => {
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º YYYY-MM-DD –≤ –î–î.–ú–ú.–ì–ì–ì–ì –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è
        localStorage.setItem('pdf_end_date', e.target.value.split('-').reverse().join('.'));
    });

// ... (–∫–æ–¥ –¥–æ –∫–Ω–æ–ø–∫–∏) ...

    const downloadPdfBtn = createElement('button', 'btn btn-primary download-pdf-btn', '‚¨áÔ∏è –°–≤–æ–¥–Ω—ã–π PDF');

    // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –¢–µ–ø–µ—Ä—å –∫–Ω–æ–ø–∫–∞ –°–†–ê–ó–£ –≤—ã–∑—ã–≤–∞–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –æ—Ç—á–µ—Ç–∞ (–±–µ–∑ –º–æ–¥–∞–ª–∫–∏ –æ–ø—Ü–∏–π)
    downloadPdfBtn.addEventListener('click', () => {
        const startValue = startDateInput.value; // YYYY-MM-DD
        const endValue = endDateInput.value;    // YYYY-MM-DD

        if (startValue && endValue) {
            const startDate = startValue.split('-').reverse().join('.');
            const endDate = endValue.split('-').reverse().join('.');

            // 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML, –ø–µ—Ä–µ–¥–∞–≤–∞—è —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            const reportHtml = generateCycleReportHtml(
                currentCycle,
                startDate,
                endDate
            );

            if (reportHtml) {
                // 2. –ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ—Ç—á–µ—Ç–∞
                state.reportHtmlCache = reportHtml;
                state.currentPage = 'cycleReport';
                render();
            }
        } else {
            showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –Ω–∞—á–∞–ª—å–Ω—É—é –∏ –∫–æ–Ω–µ—á–Ω—É—é –¥–∞—Ç—ã.');
        }
    });

    pdfControls.append(createElement('span', 'pdf-label', '–û—Ç—á–µ—Ç —Å:'), startDateInput, createElement('span', 'pdf-label', '–ø–æ:'), endDateInput, downloadPdfBtn);

    // ... (–æ—Å—Ç–∞–ª—å–Ω–∞—è —á–∞—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏) ...



    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ –≥—Ä—É–ø–ø—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    controlsWrapper.append(weekControlsGroup);
    contentContainer.append(controlsWrapper);
    contentContainer.append(pdfControls); // –û—Ç–¥–µ–ª—å–Ω–∞—è —Å–µ–∫—Ü–∏—è –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –¥–∞—Ç

    // -----------------------------------------------------------
    // –†–ï–ù–î–ï–†–ò–ù–ì –¢–ê–ë–õ–ò–¶–´
    // -----------------------------------------------------------
    // ... (–û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Ç–∞–±–ª–∏—Ü—ã –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

    const planData = state.supplementPlan || { supplements: [], data: [] };
    const todayDateString = getTodayDateString(); // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì
    let todayRowElement = null; // –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —ç–ª–µ–º–µ–Ω—Ç–∞ —Å—Ç—Ä–æ–∫–∏

    if (planData.supplements.length === 0 && planData.data.length === 0) {
        contentContainer.append(createElement('div', 'muted', '–ù–∞—á–Ω–∏—Ç–µ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–µ—Ä–≤–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞.'));
    } else {
        const tableWrapper = createElement('div', 'supplement-table-wrapper');
        tableWrapper.id = 'supplement-table-wrapper'; // üî• –î–û–ë–ê–í–õ–ï–ù–û: ID –¥–ª—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∏

        const table = createElement('table', 'supplement-plan-table');

        // –ó–ê–ì–û–õ–û–í–û–ö –¢–ê–ë–õ–ò–¶–´ (–ü—Ä–µ–ø–∞—Ä–∞—Ç—ã)
        const thead = createElement('thead');
        const headerRow = createElement('tr');
        headerRow.append(createElement('th', 'date-col', '–î–∞—Ç–∞'));
        headerRow.append(createElement('th', 'day-col'));

        planData.supplements.forEach(supName => {

            const deleteBtn = createElement('button', 'btn delete-supplement-btn');
            deleteBtn.innerHTML = '<svg xmlns="http://www.w3.org/2000/svg" width="512" height="512" viewBox="0 0 512 512"><title>Ios-close-empty SVG Icon</title><path fill="currentColor" d="M340.2 160l-84.4 84.3-84-83.9-11.8 11.8 84 83.8-84 83.9 11.8 11.7 84-83.8 84.4 84.2 11.8-11.7-84.4-84.3 84.4-84.2z"/></svg>';
            deleteBtn.dataset.name = supName;

            const th = createElement('th', 'supplement-col');
            const supHeader = createElement('div', 'supplement-header');
            const supNameSpan = createElement('span', '', supName);


            supHeader.append(deleteBtn);
            supHeader.append(supNameSpan);

            th.append(supHeader);
            headerRow.append(th);

        });

        thead.append(headerRow);
        table.append(thead);

        // –¢–ï–õ–û –¢–ê–ë–õ–ò–¶–´ (–î–∞—Ç—ã –∏ –î–æ–∑–∏—Ä–æ–≤–∫–∏)
        const tbody = createElement('tbody');
        planData.data.forEach((dayRecord, dayIndex) => {
            let rowClasses = '';
            // üî• –õ–û–ì–ò–ö–ê: –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∏ –ø–æ–¥—Å–≤–µ—Ç–∫–∞ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
            if (dayRecord.date === todayDateString) {
                rowClasses += ' today-highlight';
            }
            if (dayRecord.dayOfWeek === '–≤—Å' || dayRecord.dayOfWeek === '—Å–±') {
                rowClasses += ' weekend';
            }

            const tr = createElement('tr', rowClasses.trim());
            tr.dataset.date = dayRecord.date; // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏

            // üî• –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –Ω–∞ –î–î.–ú–ú
            tr.append(createElement('td', 'date-col', formatDayAndMonth(dayRecord.date)));

            tr.append(createElement('td', 'day-col', dayRecord.dayOfWeek));

            planData.supplements.forEach(supName => {
                const td = createElement('td', 'dose-col');
                const doseInput = createElement('input', 'dose-input');
                doseInput.type = 'text';
                doseInput.placeholder = '';
                doseInput.value = dayRecord.doses && dayRecord.doses[supName] ? dayRecord.doses[supName] : '';
                doseInput.dataset.supName = supName;
                doseInput.dataset.dayIndex = dayIndex;

                // –û—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–ª—è –¥–æ–∑–∏—Ä–æ–≤–æ–∫
                doseInput.addEventListener('input', (e) => {
                    debouncedSaveDoseData(
                        supName,
                        dayIndex,
                        e.target.value
                    );
                });

                td.append(doseInput);
                tr.append(td);
            });
            tbody.append(tr);

            if (dayRecord.date === todayDateString) {
                todayRowElement = tr;
            }
        });
        table.append(tbody);
        tableWrapper.append(table);
        contentContainer.append(tableWrapper);

        // üî• –õ–û–ì–ò–ö–ê: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π –¥–∞—Ç–µ
        if (todayRowElement) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º setTimeout, —á—Ç–æ–±—ã –ø—Ä–æ–∫—Ä—É—Ç–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞ –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≤—Å—Ç–∞–≤–ª–µ–Ω—ã –≤ DOM
            setTimeout(() => {
                const wrapper = document.getElementById('supplement-table-wrapper');
                if (wrapper) {
                    const rowRect = todayRowElement.getBoundingClientRect();
                    const wrapperRect = wrapper.getBoundingClientRect();

                    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –¥–ª—è —Ü–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä–æ–∫–∏
                    // (rowRect.top - wrapperRect.top) - —ç—Ç–æ –ø–æ–ª–æ–∂–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä—Ö–Ω–µ–π –≥—Ä–∞–Ω–∏—Ü—ã –æ–±–µ—Ä—Ç–∫–∏
                    // + wrapper.scrollTop - –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø—Ä–æ–∫—Ä—É—Ç–∫—É
                    // - (wrapperRect.height / 2) + (rowRect.height / 2) - —Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º
                    const scrollPosition = rowRect.top - wrapperRect.top + wrapper.scrollTop - (wrapperRect.height / 2) + (rowRect.height / 2);

                    wrapper.scrollTo({
                        top: scrollPosition,
                        behavior: 'smooth'
                    });
                }
            }, 100);
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞
        tableWrapper.querySelectorAll('.delete-supplement-btn').forEach(btn => {
            btn.addEventListener('click', async () => {
                const supName = btn.dataset.name;
                const newPlan = JSON.parse(JSON.stringify(state.supplementPlan));

                // 1. –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–∞—Ä–∞—Ç–æ–≤
                newPlan.supplements = newPlan.supplements.filter(name => name !== supName);

                // 2. –£–¥–∞–ª—è–µ–º –¥–æ–∑–∏—Ä–æ–≤–∫–∏ —ç—Ç–æ–≥–æ –ø—Ä–µ–ø–∞—Ä–∞—Ç–∞ –∏–∑ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π
                newPlan.data = newPlan.data.map(dayRecord => {
                    if (dayRecord.doses) {
                        delete dayRecord.doses[supName];
                    }
                    return dayRecord;
                });

                await updateSupplementPlanInFirestore(newPlan);
            });
        });

    }

    root.append(contentContainer);
}




// =================================================================
// üåü –ù–û–í–´–ô –§–£–ù–ö–¶–ò–û–ù–ê–õ: –û–¢–ß–ï–¢–´ –û –ü–†–û–ì–†–ï–°–°–ï (–ó–ê–ú–ï–†–´ –ò –§–û–¢–û)
// =================================================================

// -----------------------------------------------------------
// üî• –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò FIREBASE (–ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ doc, updateDoc, addDoc, deleteDoc –¥–æ—Å—Ç—É–ø–Ω—ã)
// -----------------------------------------------------------

// üî• –í–∞—à–∞ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –æ—Ç—á–µ—Ç–æ–≤



// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ / –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ
async function saveProgressReport(reportData, reportId = null) {
    const reportsCollection = getReportsCollection();

    try {
        if (reportId) {
            const docRef = doc(reportsCollection, reportId);
            await updateDoc(docRef, reportData);
            showToast('–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω!');
        } else {
            await addDoc(reportsCollection, reportData);
            showToast('–û—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!');
        }
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:", error);
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ.');
    }
}

// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
async function deleteReport(reportId) {
    if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ?')) return;
    const reportsCollection = getReportsCollection();
    try {
        // üî• –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ –∏–∑ Storage
        await deleteDoc(doc(reportsCollection, reportId));
        showToast('–û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω.');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞:", error);
        showToast('–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –æ—Ç—á–µ—Ç.');
    }
}



// -----------------------------------------------------------
// üî• –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò –†–ï–ù–î–ï–†–ò–ù–ì–ê –≠–õ–ï–ú–ï–ù–¢–û–í –ú–û–î–ê–õ–¨–ù–û–ì–û –û–ö–ù–ê
// -----------------------------------------------------------

function renderMetricsList(metrics, container, focusLast = false) {
    container.innerHTML = ''; // –æ—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫

    metrics.forEach((metric, index) => {
        const row = createElement('div', 'metric-row');

        const nameInput = createElement('input', 'metric-name-input');
        nameInput.type = 'text';
        nameInput.placeholder = '–ù–∞–∑–≤–∞–Ω–∏–µ';
        nameInput.value = metric.name || '';

        const separator = createElement('span', 'metric-separator', '-');

        const valueInput = createElement('input', 'metric-value-input');
        valueInput.type = 'text';
        valueInput.placeholder = '–ó–Ω–∞—á–µ–Ω–∏–µ';
        valueInput.value = metric.value || '';

        // –∫–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–º–µ—Ä–∞
        const removeBtn = createElement('button', 'btn btn-small btn-danger', '—É–¥–∞–ª–∏—Ç—å');
        removeBtn.addEventListener('click', () => {
            metrics.splice(index, 1);
            renderMetricsList(metrics, container);
        });

        row.appendChild(nameInput);
        row.appendChild(separator);
        row.appendChild(valueInput);
        row.appendChild(removeBtn);

        container.appendChild(row);
    });

    // –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É
    if (focusLast && container.lastChild) {
        container.lastChild.querySelector('input')?.focus();
    }
}










// üî• –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è Storage
function getStoragePathForClient(reportId) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—É –∂–µ –ª–æ–≥–∏–∫—É –ø—É—Ç–∏, —á—Ç–æ –∏ –¥–ª—è Firestore, —á—Ç–æ–±—ã —Å–≤—è–∑–∞—Ç—å —Ñ–æ—Ç–æ —Å –∫–ª–∏–µ–Ω—Ç–æ–º/–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    const basePath = state.currentMode === 'own' ? userId : state.selectedClientId;

    // –ï—Å–ª–∏ reportId –µ—â–µ –Ω–µ—Ç (—Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞), –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
    const reportPath = reportId ? reportId : `temp_${Date.now()}`;

    // –°—Ç—Ä—É–∫—Ç—É—Ä–∞: artifacts/{appId}/users/{basePath}/reports/{reportId}/photos/
    // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ appId, userId, state –¥–æ—Å—Ç—É–ø–Ω—ã
    return `artifacts/${appId}/users/${basePath}/reports/${reportPath}/`;
}


// üî• –ü–û–õ–ù–û–°–¢–¨–Æ –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø renderPhotoControls
// üî• –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø renderPhotoControls
function renderPhotoControls(photos, container, reportId) {
    container.innerHTML = '';

    // 1Ô∏è‚É£ –ü—Ä–µ–≤—å—é —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π
    const previewContainer = createElement('div', 'photo-previews');
    previewContainer.style.display = 'flex';
    previewContainer.style.flexWrap = 'wrap';
    previewContainer.style.gap = '10px';
    previewContainer.style.marginBottom = '10px';

    photos.forEach((photo, index) => {
        console.log("üëâ renderPhotoControls: photo.url =", photo.url, "type:", typeof photo.url);

        // –ï—Å–ª–∏ url –Ω–µ —Å—Ç—Ä–æ–∫–∞ ‚Äî —Å—Ä–∞–∑—É –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
        if (typeof photo.url !== "string") {
            console.error("‚ùå –û—à–∏–±–∫–∞: photo.url –Ω–µ —Å—Ç—Ä–æ–∫–∞!", photo);
            return; // –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ [object Object]
        }

        const preview = createElement('div', 'photo-preview-item');
        preview.style.position = 'relative';
        preview.style.width = '60px';
        preview.style.height = '60px';
        preview.style.backgroundImage = `url(${photo.url})`; // ‚úÖ —É–∂–µ —Ç–æ—á–Ω–æ —Å—Ç—Ä–æ–∫–∞
        preview.style.backgroundSize = 'cover';
        preview.style.borderRadius = '5px';
        preview.title = "–ù–∞–∂–º–∏—Ç–µ –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–∏—è";

        // –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è
        const deleteBtn = createElement('button', 'btn btn-delete-photo');
        deleteBtn.innerHTML = '√ó';


        deleteBtn.addEventListener('click', () => {
            if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Ñ–æ—Ç–æ?')) return;
            photos.splice(index, 1);
            renderPhotoControls(photos, container, reportId);
        });

        // –ö–ª–∏–∫ –ø–æ –ø—Ä–µ–≤—å—é ‚Äî –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–ª–Ω–æ–≥–æ —Ñ–æ—Ç–æ
        preview.addEventListener('click', () => openPhotoFullScreen(photo.url, photo.name));

        preview.append(deleteBtn);
        previewContainer.append(preview);
    });

    container.append(previewContainer);

    // 2Ô∏è‚É£ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Ñ–æ—Ç–æ
    const fileInput = createElement('input', 'photo-file-input');
    fileInput.type = 'file';
    fileInput.accept = 'image/*';
    fileInput.multiple = true;
    fileInput.style.display = 'none';

    const addPhotoBtn = createElement('button', 'btn btn-secondary btn-small', '+');
    addPhotoBtn.addEventListener('click', () => fileInput.click());

    fileInput.addEventListener('change', async (e) => {
        const files = Array.from(e.target.files);
        for (const file of files) {
            showToast(`–ó–∞–≥—Ä—É–∑–∫–∞ ${file.name} —á–µ—Ä–µ–∑ Cloudinary...`);
            try {
                const permanentUrl = await uploadFileToCloudinary(file);

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ Cloudinary –≤–µ—Ä–Ω—É–ª —Å—Ç—Ä–æ–∫—É
                if (typeof permanentUrl !== "string") {
                    console.error("‚ùå Cloudinary –≤–µ—Ä–Ω—É–ª –Ω–µ —Å—Ç—Ä–æ–∫—É:", permanentUrl);
                    showToast(`–û—à–∏–±–∫–∞: Cloudinary –≤–µ—Ä–Ω—É–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π URL –¥–ª—è ${file.name}`, 'error');
                    continue;
                }

                photos.push({ url: permanentUrl, name: file.name });
                showToast(`–§–æ—Ç–æ ${file.name} –∑–∞–≥—Ä—É–∂–µ–Ω–æ!`);
            } catch (error) {
                console.error(error);
                showToast(`–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ ${file.name}`, 'error');
            }
        }
        renderPhotoControls(photos, container, reportId);
        e.target.value = '';
    });

    container.append(addPhotoBtn);
    container.append(fileInput);
}


// üîë –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —ç–∫—Ä–∞–Ω
const openPhotoFullScreen = (url, name = '') => {
    const overlay = createElement('div', 'overlay');
    overlay.style.cssText = `
        position: fixed; top:0; left:0; width:100%; height:100%;
        background: rgba(0,0,0,0.9); display:flex; justify-content:center; align-items:center;
        z-index:1000;
    `;

    const fullImg = createElement('img');
    fullImg.src = url;
    fullImg.alt = name;
    fullImg.style.maxWidth = '90%';
    fullImg.style.maxHeight = '90%';
    fullImg.style.borderRadius = '5px';
    fullImg.style.boxShadow = '0 0 20px rgba(0,0,0,0.5)';

    overlay.appendChild(fullImg);

    overlay.addEventListener('click', () => overlay.remove());
    document.body.appendChild(overlay);
};


// üî• –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–∫—Ä—ã—Ç–∏—è —Ñ–æ—Ç–æ –≤ –ø–æ–ª–Ω—ã–π —Ä–∞–∑–º–µ—Ä
function openFullScreenPhoto(url, name = '') {
    const overlay = createElement('div', 'overlay');
    overlay.style.cssText = `
        position: fixed; top:0; left:0; width:100%; height:100%;
        background: rgba(0,0,0,0.9); display:flex; justify-content:center; align-items:center;
        z-index:1000;
    `;

    const fullImg = createElement('img');
    fullImg.src = url;
    fullImg.alt = name;
    fullImg.style.maxWidth = '90%';
    fullImg.style.maxHeight = '90%';
    fullImg.style.borderRadius = '5px';
    fullImg.style.boxShadow = '0 0 20px rgba(0,0,0,0.5)';

    overlay.appendChild(fullImg);

    // –∫–ª–∏–∫ –ø–æ —Ñ–æ–Ω—É –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Å–º–æ—Ç—Ä
    overlay.addEventListener('click', () => overlay.remove());

    document.body.appendChild(overlay);
}













// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: collectCurrentMetrics –î–û–õ–ñ–ù–ê –ë–´–¢–¨ –ó–î–ï–°–¨
function collectCurrentMetrics(metricsListDiv) {
    const metrics = [];
    const rows = metricsListDiv.querySelectorAll('.metric-row');
    rows.forEach(row => {
        const nameInput = row.querySelector('.metric-name-input');
        const valueInput = row.querySelector('.metric-value-input');
        metrics.push({
            name: nameInput.value.trim(),
            value: valueInput.value.trim()
        });
    });
    return metrics;
}
// -------------------------------------------------------------------


// üî• –ù–û–í–ê–Ø –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø CLOUDINARY
async function uploadFileToCloudinary(file) {
    const url = `https://api.cloudinary.com/v1_1/${CLOUDINARY_CLOUD_NAME}/image/upload`;

    const formData = new FormData();
    formData.append('file', file);
    formData.append('upload_preset', CLOUDINARY_UPLOAD_PRESET);

    const response = await fetch(url, { method: 'POST', body: formData });
    const data = await response.json();

    if (!data.secure_url) {
        console.error("Cloudinary –æ—Ç–≤–µ—Ç:", data);
        throw new Error("–ù–µ—Ç secure_url –≤ –æ—Ç–≤–µ—Ç–µ Cloudinary");
    }

    return data.secure_url;  // ‚úÖ —Å—Ç—Ä–æ–∫–∞
}




// -----------------------------------------------------------
// üî• –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –ú–û–î–ê–õ–¨–ù–û–ï –û–ö–ù–û –û–¢–ß–ï–¢–ê –û –ü–†–û–ì–†–ï–°–°–ï
// -----------------------------------------------------------
function openProgressReportModal(reportData = null, isDuplicate = false) {
    const root = document.getElementById('root');
    const overlay = createElement('div', 'modal-overlay', '');
    overlay.classList.add('active');

    let reportToEdit = reportData ? JSON.parse(JSON.stringify(reportData)) : {};

    if (isDuplicate && reportData) {
        // –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ: —Å–æ—Ö—Ä–∞–Ω—è–µ–º —à–∞–±–ª–æ–Ω, –Ω–æ –æ—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, —Ñ–æ—Ç–æ –∏ ID
        reportToEdit = {
            metricTemplate: reportData.metricTemplate,
            metrics: (reportData.metricTemplate || []).map(m => ({ name: m.name, value: '' })),
            comment: '',
            photos: [],
            id: null
        };
    } else if (!reportToEdit.metrics) {
        reportToEdit.metrics = [];
        reportToEdit.photos = [];
        reportToEdit.comment = '';
    }

    const modalContent = createElement('div', 'modal-content modal-progress-report');
    modalContent.style.maxWidth = '600px';

    // --- –ó–ê–ì–û–õ–û–í–û–ö ---
    modalContent.appendChild(createElement('div', 'modal-title', reportData ? '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –û—Ç—á–µ—Ç–∞' : '–ù–æ–≤—ã–π –û—Ç—á–µ—Ç –æ –ü—Ä–æ–≥—Ä–µ—Å—Å–µ'));

    // --- –î–∞—Ç–∞ ---
    const dateDisplay = createElement('p', 'report-date-display', `–î–∞—Ç–∞: ${reportToEdit.date || getTodayDateString()}`);
    dateDisplay.style.marginBottom = '15px';
    modalContent.appendChild(dateDisplay);


    // -----------------------------------------------------------
    // –°–ï–ö–¶–ò–Ø 1: –ó–ê–ú–ï–†–´ (–ú–ï–¢–†–ò–ö–ò)
    // -----------------------------------------------------------
    const metricsContainer = createElement('div', 'metrics-editor-container');
    metricsContainer.innerHTML = '<h4>–ó–∞–º–µ—Ä—ã</h4>';

    const metricsListDiv = createElement('div', 'metrics-list');
    metricsContainer.appendChild(metricsListDiv);

    // –ö–Ω–æ–ø–∫–∞ "–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ä"
    const addMetricBtn = createElement('button', 'btn btn-secondary btn-small', '+');
    addMetricBtn.style.marginTop = '10px';

    addMetricBtn.addEventListener('click', () => {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 1: –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ DOM, —á—Ç–æ–±—ã –Ω–µ –ø–æ—Ç–µ—Ä—è—Ç—å –∏—Ö
        reportToEdit.metrics = collectCurrentMetrics(metricsListDiv);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ –ø—É—Å—Ç–æ–µ –ø–æ–ª–µ
        reportToEdit.metrics.push({ name: '', value: '' });

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫
        renderMetricsList(reportToEdit.metrics, metricsListDiv, true);
    });

    metricsContainer.appendChild(addMetricBtn);
    modalContent.appendChild(metricsContainer);

    // -----------------------------------------------------------
    // –°–ï–ö–¶–ò–Ø 2: –§–û–¢–û
    // -----------------------------------------------------------
    const photosContainer = createElement('div', 'photos-editor-container');
    photosContainer.innerHTML = '<h4 style="margin-top: 20px;">–§–æ—Ç–æ</h4>';
    const photosControlsDiv = createElement('div', 'photos-controls-div');
    photosContainer.appendChild(photosControlsDiv);

    modalContent.appendChild(photosContainer);

    // -----------------------------------------------------------
    // –°–ï–ö–¶–ò–Ø 3: –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô
    // -----------------------------------------------------------
    const commentInput = createElement('textarea', 'comment-input');
    commentInput.placeholder = '–û–±—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º...';
    commentInput.value = reportToEdit.comment || '';
    commentInput.style.marginTop = '20px';
    commentInput.style.minHeight = '80px';
    commentInput.style.width = '100%';

    modalContent.appendChild(createElement('h4', null, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'));
    modalContent.appendChild(commentInput);


    // -----------------------------------------------------------
    // –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –†–ï–ù–î–ï–†
    // -----------------------------------------------------------

    // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 2: –î–æ–±–∞–≤–ª—è–µ–º —Å–ª—É—à–∞—Ç–µ–ª—å 'input' –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
    // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –ø—Ä–∏ –ª—é–±–æ–º –≤–≤–æ–¥–µ –≤ –ª—é–±–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞, –º–∞—Å—Å–∏–≤ reportToEdit.metrics
    // –±—É–¥–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω —Å –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –∏–∑ DOM.
    metricsListDiv.addEventListener('input', (e) => {
        if (e.target.classList.contains('metric-name-input')  || e.target.classList.contains('metric-value-input')) {
            reportToEdit.metrics = collectCurrentMetrics(metricsListDiv);
            // –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: renderMetricsList –∑–¥–µ—Å—å –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Å–±–∏–≤–∞—Ç—å —Ñ–æ–∫—É—Å
        }
    });

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∏—Å–∫–æ–≤
    renderMetricsList(reportToEdit.metrics, metricsListDiv, true);
    renderPhotoControls(reportToEdit.photos, photosControlsDiv, reportToEdit.id);
    renderMetricsList(reportToEdit.metrics || [], metricsListDiv);

    // --- –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø ---
    const controls = createElement('div', 'modal-controls', '');
    const cancelBtn = createElement('button', 'btn', '–û—Ç–º–µ–Ω–∞');
    cancelBtn.onclick = () => overlay.remove();

    const saveBtn = createElement('button', 'btn btn-primary', 'üíæ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –û—Ç—á–µ—Ç');
    saveBtn.onclick = async () => {
        // üî• –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï 3: –ò—Å–ø–æ–ª—å–∑—É–µ–º collectCurrentMetrics –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–±–æ—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
        // –≠—Ç–æ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ –¥–∞–∂–µ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–∂–∏–º–∞–ª "–ù–æ–≤—ã–π –∑–∞–º–µ—Ä",
        // –µ–≥–æ –≤–≤–µ–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.
        const finalMetrics = collectCurrentMetrics(metricsListDiv);
        let isValid = true;

        // –§–∏–Ω–∞–ª—å–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è (–ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –ø—É—Å—Ç—ã—Ö –ø–∞—Ä "–∏–º—è/–∑–Ω–∞—á–µ–Ω–∏–µ")
        finalMetrics.forEach(m => {
            if (!m.name || !m.value) {
                isValid = false;
            }
        });

        if (!isValid) {
            showToast('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ, —Ç–∞–∫ –∏ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∑–∞–º–µ—Ä–∞.', 'error');
            return;
        }

        if (finalMetrics.length === 0) {
            showToast('–û—Ç—á–µ—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω –∑–∞–º–µ—Ä.', 'error');
            return;
        }

        // 1. –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        const reportToSave = {
            date: reportToEdit.date || getTodayDateString(),
            comment: commentInput.value.trim(),
            metrics: finalMetrics,
            photos: reportToEdit.photos,
            metricTemplate: finalMetrics.map(m => ({ name: m.name }))
        };

        // 2. –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        await saveProgressReport(reportToSave, reportToEdit.id);
        overlay.remove();
    };


    controls.appendChild(cancelBtn);
    controls.appendChild(saveBtn);
    modalContent.appendChild(controls);
    overlay.appendChild(modalContent);
    root.appendChild(overlay);
}




// =================================================================
// üåü –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø: –†–ï–ù–î–ï–† –°–¢–†–ê–ù–ò–¶–´ –û–¢–ß–ï–¢–û–í (–ò–°–ü–†–ê–í–õ–ï–ù–û)
// =================================================================
function renderReportsPage() {
    const root = document.getElementById('root');
    root.innerHTML = '';

    const contentContainer = createElement('div', 'reports-page');
    contentContainer.style.padding = '10px';

    const selectedCycle = state.cycles.find(c => c.id === state.selectedCycleId);

    if (!selectedCycle) {
        // –¶–∏–∫–ª –Ω–µ –≤—ã–±—Ä–∞–Ω ‚Äî —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
        contentContainer.appendChild(createElement('h3', null, '–û—Ç—á–µ—Ç—ã'));
        contentContainer.appendChild(createElement('div', 'muted', '–í—ã–±–µ—Ä–∏—Ç–µ —Ü–∏–∫–ª –Ω–∞ –≤–∫–ª–∞–¥–∫–µ "–ü—Ä–æ–≥—Ä–∞–º–º—ã" –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç—á–µ—Ç–∞.'));
        root.appendChild(contentContainer);

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –æ—Å—Ç–∞—ë—Ç—Å—è –≤–∏–¥–∏–º–æ–π
        const nav = document.querySelector('.navigation');
        if (nav) nav.style.display = 'flex';
        return;
    }

    // –¶–∏–∫–ª –≤—ã–±—Ä–∞–Ω ‚Äî —Ä–µ–Ω–¥–µ—Ä–∏–º –æ—Ç—á–µ—Ç –∫–∞–∫ —Ä–∞–Ω—å—à–µ
    contentContainer.appendChild(createElement('h3', null, `–û—Ç—á–µ—Ç—ã: ${selectedCycle.name}`));

    const summaryBtn = createElement('button', 'btn btn-primary', 'üìä –°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç');
    summaryBtn.style.marginBottom = '15px';
    summaryBtn.addEventListener('click', openReportsSummaryModal);
    contentContainer.appendChild(summaryBtn);


    // –ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ü–∏–∫–ª
    const createProgressReportBtn = createElement('button', 'btn btn-primary', '‚ûï –ù–æ–≤—ã–π –ó–∞–º–µ—Ä/–§–æ—Ç–æ');
    createProgressReportBtn.style.marginBottom = '15px';
    createProgressReportBtn.addEventListener('click', () => openProgressReportModal());
    contentContainer.appendChild(createProgressReportBtn);

    const compareBtn = createElement('button', 'btn btn-primary', 'üîç –°—Ä–∞–≤–Ω–∏—Ç—å');
    compareBtn.style.marginBottom = '15px';
    compareBtn.addEventListener('click', openCompareModal);
    contentContainer.appendChild(compareBtn);

    // –î–∞–ª–µ–µ —Ä–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ (—Ç–æ—Ç –∂–µ –∫–æ–¥ —á—Ç–æ —É —Ç–µ–±—è)
    const reportsList = createElement('div', 'reports-list');
    reportsList.style.display = 'flex';
    reportsList.style.flexDirection = 'column';
    reportsList.style.gap = '15px';

    if (!state.reports || state.reports.length === 0) {
        reportsList.append(createElement('div', 'muted', '–ù–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤.'));
    } else {
        state.reports.sort((a, b) => new Date(b.date.split('.').reverse().join('-')) - new Date(a.date.split('.').reverse().join('-')));
        state.reports.forEach(report => {
            const reportItem = createElement('div', 'report-item');
            reportItem.style.border = '1px solid #ccc';
            reportItem.style.borderRadius = '8px';
            reportItem.style.padding = '10px';
            reportItem.style.backgroundColor = '#fff';
            reportItem.style.boxShadow = '0 2px 5px rgba(0,0,0,0.1)';
            reportItem.style.display = 'flex';
            reportItem.style.flexDirection = 'column';
            reportItem.style.gap = '10px';

            reportItem.appendChild(createElement('div', 'report-date', `üìÖ ${report.date}`));

            if (report.metrics && report.metrics.length > 0) {
                const metricsDiv = createElement('div', 'report-metrics');
                metricsDiv.style.display = 'flex';
                metricsDiv.style.flexWrap = 'wrap';
                metricsDiv.style.gap = '5px';
                report.metrics.forEach(metric => {
                    const metricItem = createElement('div', 'metric-item', `${metric.name}: ${metric.value}`);
                    metricItem.style.backgroundColor = '#f0f0f0';
                    metricItem.style.padding = '4px 6px';
                    metricItem.style.borderRadius = '4px';
                    metricItem.style.fontSize = '14px';
                    metricsDiv.appendChild(metricItem);
                });
                reportItem.appendChild(metricsDiv);
            }

            if (report.photos && report.photos.length > 0) {
                const photosDiv = createElement('div', 'report-photos');
                photosDiv.style.display = 'flex';
                photosDiv.style.flexWrap = 'wrap';
                photosDiv.style.gap = '8px';
                report.photos.forEach((photo, index) => {
                    if (photo.url) {
                        const img = createElement('img');
                        img.src = photo.url;
                        img.style.width = '100px';
                        img.style.height = '100px';
                        img.style.objectFit = 'cover';
                        img.style.borderRadius = '5px';
                        img.style.cursor = 'pointer';
                        img.title = photo.name || `–§–æ—Ç–æ ${index + 1}`;
                        photo.number = index + 1;
                        img.addEventListener('click', () => openFullScreenPhoto(photo.url, photo.name));
                        photosDiv.appendChild(img);
                    }
                });
                reportItem.appendChild(photosDiv);
            }

            if (report.comment) {
                const commentPreview = createElement('div', 'report-comment', report.comment.length > 50 ? report.comment.substring(0, 50) + '...' : report.comment);
                commentPreview.style.fontStyle = 'italic';
                commentPreview.style.color = '#555';
                reportItem.appendChild(commentPreview);
            }

            const actionsDiv = createElement('div', 'report-actions');
            actionsDiv.style.display = 'flex';
            actionsDiv.style.gap = '5px';
            actionsDiv.style.flexWrap = 'wrap';

            const editBtn = createElement('button', 'btn btn-small btn-secondary', '‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å');
            editBtn.addEventListener('click', () => openProgressReportModal(report));
            const duplicateBtn = createElement('button', 'btn btn-small btn-secondary', 'üìã –î—É–±–ª–∏—Ä–æ–≤–∞—Ç—å');
            duplicateBtn.addEventListener('click', () => openProgressReportModal(report, true));

            const deleteBtn = createElement('button', 'btn btn-small btn-danger', 'üóëÔ∏è –£–¥–∞–ª–∏—Ç—å');
            deleteBtn.addEventListener('click', () => {
                openConfirmModal("–£–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç?", async () => {
                    await deleteReport(report.id);
                    showToast("–û—Ç—á–µ—Ç —É–¥–∞–ª–µ–Ω!");
                });
            });


            actionsDiv.append(editBtn, duplicateBtn, deleteBtn);
            reportItem.appendChild(actionsDiv);

            reportsList.appendChild(reportItem);
        });
    }

    contentContainer.appendChild(reportsList);
    root.appendChild(contentContainer);
}


// ======================================================================
// üåü –ú–æ–¥–∞–ª–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
// ======================================================================
function openReportsSummaryModal() {
    const overlay = createElement('div', 'modal-overlay');
    overlay.classList.add('active');

    const modal = createElement('div', 'modal-content');
    modal.style.maxWidth = '400px';

    modal.appendChild(createElement('h3', null, '–í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥'));

    // –ü–æ–ª—è –¥–∞—Ç
    const fromInput = createElement('input');
    fromInput.type = 'date';
    fromInput.style.marginBottom = '10px';
    const toInput = createElement('input');
    toInput.type = 'date';

    modal.appendChild(createElement('label', null, '–° –¥–∞—Ç—ã:'));
    modal.appendChild(fromInput);
    modal.appendChild(createElement('label', null, '–ü–æ –¥–∞—Ç—É:'));
    modal.appendChild(toInput);

    // –ö–Ω–æ–ø–∫–∏
    const controls = createElement('div', 'modal-controls');
    const cancelBtn = createElement('button', 'btn', '–û—Ç–º–µ–Ω–∞');
    cancelBtn.onclick = () => overlay.remove();

    const showBtn = createElement('button', 'btn btn-primary', '–ü–æ–∫–∞–∑–∞—Ç—å');
    showBtn.onclick = () => {
        if (!fromInput.value || !toInput.value) {
            alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–±–µ –¥–∞—Ç—ã');
            return;
        }
        overlay.remove();
        renderReportsSummaryPage(fromInput.value, toInput.value);
    };

    controls.appendChild(cancelBtn);
    controls.appendChild(showBtn);
    modal.appendChild(controls);

    overlay.appendChild(modal);
    document.body.appendChild(overlay);
}

// ======================================================================
// üåü –°—Ç—Ä–∞–Ω–∏—Ü–∞ —Å–≤–æ–¥–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞
// ======================================================================
function renderReportsSummaryPage(startDate, endDate) {
    const root = document.getElementById('root');
    root.innerHTML = '';

    // –ó–∞–≥–æ–ª–æ–≤–æ–∫
    const header = createElement('div', 'summary-header');
    header.style.display = 'flex';
    header.style.justifyContent = 'space-between';
    header.style.alignItems = 'center';

    header.appendChild(createElement('h3', null, '–°–≤–æ–¥–Ω—ã–π –æ—Ç—á–µ—Ç'));

    const printBtn = createElement('button', 'btn btn-primary', 'üìÑ –ü–µ—á–∞—Ç—å / PDF');
    printBtn.onclick = () => window.print();
    header.appendChild(printBtn);

    root.appendChild(header);

    // –§–∏–ª—å—Ç—Ä—É–µ–º –æ—Ç—á–µ—Ç—ã –ø–æ –ø–µ—Ä–∏–æ–¥—É
    const reports = (state.reports || []).filter(r => {
        const [d, m, y] = r.date.split('.');
        const reportDate = new Date(`${y}-${m}-${d}`);
        return reportDate >= new Date(startDate) && reportDate <= new Date(endDate);
    });

    if (reports.length === 0) {
        root.appendChild(createElement('p', null, '–ó–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –æ—Ç—á—ë—Ç–æ–≤ –Ω–µ—Ç.'));
        return;
    }

    // --- –°–æ–±–∏—Ä–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∑–∞–º–µ—Ä–æ–≤ ---
    const metricNamesSet = new Set();
    reports.forEach(r => {
        (r.metrics || []).forEach(m => metricNamesSet.add(m.name));
    });
    const metricNames = Array.from(metricNamesSet);

    // --- –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É ---
    const table = createElement('table', 'summary-table');
    table.style.width = '100%';
    table.style.borderCollapse = 'collapse';

    // --- –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã ---
    const thead = createElement('thead');
    const headerRow = createElement('tr');
    headerRow.appendChild(createElement('th', null, '–î–∞—Ç–∞'));
    metricNames.forEach(name => headerRow.appendChild(createElement('th', null, name)));
    headerRow.appendChild(createElement('th', null, '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π'));
    thead.appendChild(headerRow);
    table.appendChild(thead);

    // --- –¢–µ–ª–æ —Ç–∞–±–ª–∏—Ü—ã ---
    const tbody = createElement('tbody');
    reports.forEach(r => {
        const row = createElement('tr');
        row.appendChild(createElement('td', null, r.date));

        metricNames.forEach(name => {
            const metric = (r.metrics || []).find(m => m.name === name);
            row.appendChild(createElement('td', null, metric ? metric.value : '')); // –µ—Å–ª–∏ –∑–∞–º–µ—Ä–∞ –Ω–µ—Ç, –ø—É—Å—Ç–æ
        });

        row.appendChild(createElement('td', null, r.comment || ''));
        tbody.appendChild(row);
    });

    table.appendChild(tbody);
    root.appendChild(table);

    // --- –°—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è –º–æ–±–∏–ª—å–Ω–æ–≥–æ –∏ PDF ---
    const style = document.createElement('style');
    style.innerHTML = `
        .summary-table th, .summary-table td {
            border: 1px solid #ccc;
            padding: 5px;
            text-align: center;
            font-size: 0.85em;
        }
        .summary-table th {
            background-color: #f0f0f0;
        }
        .summary-table td:first-child {
            font-weight: bold;
        }
        @media print {
            body { font-size: 10pt; }
            .summary-table th, .summary-table td { font-size: 9pt; padding: 3pt; }
        }
    `;
    document.head.appendChild(style);
}






// =================================================================
// üåü –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ –º–µ–∂–¥—É –æ—Ç—á—ë—Ç–∞–º–∏
// =================================================================


// --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å –≤—ã–±–æ—Ä–æ–º —Ñ–æ—Ç–æ ---
function openCompareModal() {
    if (!state.reports || state.reports.length < 2) {
        alert('–ù—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º 2 –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è');
        return;
    }

    const overlay = createElement('div');
    overlay.style.position = 'fixed';
    overlay.style.top = '0';
    overlay.style.left = '0';
    overlay.style.width = '100%';
    overlay.style.height = '100%';
    overlay.style.backgroundColor = 'rgba(0,0,0,0.7)';
    overlay.style.display = 'flex';
    overlay.style.justifyContent = 'center';
    overlay.style.alignItems = 'center';
    overlay.style.zIndex = '1000';
    overlay.addEventListener('click', e => { if (e.target === overlay) overlay.remove(); });

    const modal = createElement('div');
    modal.style.backgroundColor = '#fff';
    modal.style.padding = '20px';
    modal.style.borderRadius = '8px';
    modal.style.maxWidth = '90%';
    modal.style.maxHeight = '80%';
    modal.style.overflowY = 'auto';
    modal.style.display = 'flex';
    modal.style.flexDirection = 'column';
    modal.style.gap = '10px';

    modal.appendChild(createElement('h4', null, '–ß—Ç–æ —Å—Ä–∞–≤–Ω–∏–≤–∞—Ç—å?'));

    const selectType = createElement('select');
    selectType.style.padding = '10px';
    selectType.style.fontSize = '16px';
    selectType.style.borderRadius = '6px';
    selectType.innerHTML = `
            <option value="photos">–§–æ—Ç–æ</option>
            <option value="metrics">–ó–∞–º–µ—Ä—ã</option>
        `;
    modal.appendChild(selectType);

    const selectBefore = createElement('select');
    const selectAfter = createElement('select');
    [selectBefore, selectAfter].forEach(s => {
        s.style.padding = '10px';
        s.style.fontSize = '16px';
        s.style.borderRadius = '6px';
        s.style.marginTop = '10px';
    });

    state.reports.forEach(report => {
        const option1 = createElement('option');
        option1.value = report.id;
        option1.textContent = report.date;
        selectBefore.appendChild(option1);

        const option2 = createElement('option');
        option2.value = report.id;
        option2.textContent = report.date;
        selectAfter.appendChild(option2);
    });

    modal.appendChild(createElement('div', null, '–î–æ:'));
    modal.appendChild(selectBefore);
    modal.appendChild(createElement('div', null, '–ü–æ—Å–ª–µ:'));
    modal.appendChild(selectAfter);

    // --- –°–µ–ª–µ–∫—Ç—ã –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ñ–æ—Ç–æ ---
    const photoBefore = createElement('select');
    const photoAfter = createElement('select');
    [photoBefore, photoAfter].forEach(s => {
        s.style.padding = '8px';
        s.style.fontSize = '14px';
        s.style.borderRadius = '6px';
        s.style.marginTop = '5px';
    });

    function updatePhotoSelect(reportSelect, photoSelect) {
        const report = state.reports.find(r => r.id === reportSelect.value);
        photoSelect.innerHTML = '';
        if (report && report.photos && report.photos.length > 0) {
            report.photos.forEach(p => {
                const opt = createElement('option');
                opt.value = p.number;
                opt.textContent = p.name || `–§–æ—Ç–æ ${p.number}`;
                photoSelect.appendChild(opt);
            });
        } else {
            const opt = createElement('option');
            opt.value = -1;
            opt.textContent = '–ù–µ—Ç —Ñ–æ—Ç–æ';
            photoSelect.appendChild(opt);
        }
    }

    selectBefore.addEventListener('change', () => updatePhotoSelect(selectBefore, photoBefore));
    selectAfter.addEventListener('change', () => updatePhotoSelect(selectAfter, photoAfter));
    updatePhotoSelect(selectBefore, photoBefore);
    updatePhotoSelect(selectAfter, photoAfter);

    modal.appendChild(createElement('div', null, '–§–æ—Ç–æ –¥–æ:'));
    modal.appendChild(photoBefore);
    modal.appendChild(createElement('div', null, '–§–æ—Ç–æ –ø–æ—Å–ª–µ:'));
    modal.appendChild(photoAfter);

    const btnCompare = createElement('button', 'btn btn-primary', '–°—Ä–∞–≤–Ω–∏—Ç—å');
    btnCompare.style.marginTop = '10px';
    btnCompare.addEventListener('click', () => {
        const idBefore = selectBefore.value;
        const idAfter = selectAfter.value;
        const numBefore = photoBefore.value;
        const numAfter = photoAfter.value;

        if (idBefore === idAfter && numBefore === numAfter) { alert('–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ç–æ'); return; }

        if (selectType.value === 'photos') {
            showComparePhotos(idBefore, idAfter, numBefore, numAfter);
        } else {
            showCompareMetrics(idBefore, idAfter);
        }
        overlay.remove();
    });

    modal.appendChild(btnCompare);
    overlay.appendChild(modal);
    document.body.appendChild(overlay);
}

// =================================================================
// üåü –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ (–∑–∞–º–µ—Ä–æ–≤)
// =================================================================
function showCompareMetrics(idBefore, idAfter) {
    const report1 = state.reports.find(r => r.id === idBefore);
    const report2 = state.reports.find(r => r.id === idAfter);
    if (!report1 || !report2) return;

    const overlay = createElement('div');
    overlay.style.cssText = `
        position: fixed; top:0; left:0; width:100%; height:100%;
        background: rgba(0,0,0,0.85); display:flex; justify-content:center; align-items:center;
        z-index:1000; overflow:auto; padding:20px;
    `;
    overlay.addEventListener('click', e => { if (e.target === overlay) overlay.remove(); });

    const container = createElement('div');
    container.style.cssText = `
        background:#fff; padding:20px; border-radius:8px; max-width:90%; overflow-x:auto;
    `;

    container.appendChild(createElement('h4', null, `–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –∑–∞–º–µ—Ä–æ–≤: ${report1.date} ‚Üî ${report2.date}`));

    const table = createElement('table');
    table.style.width = '100%';
    table.style.borderCollapse = 'collapse';

    const header = createElement('tr');
    header.innerHTML = `<th>–ü–∞—Ä–∞–º–µ—Ç—Ä</th><th>${report1.date}</th><th>${report2.date}</th>`;
    table.appendChild(header);

    const metricsSet = new Set([
        ...(report1.metrics || []).map(m => m.name),
        ...(report2.metrics || []).map(m => m.name)
    ]);

    metricsSet.forEach(name => {
        const row = createElement('tr');
        const m1 = (report1.metrics || []).find(m => m.name === name);
        const m2 = (report2.metrics || []).find(m => m.name === name);
        row.innerHTML = `
            <td>${name}</td>
            <td>${m1 ? m1.value : '-'}</td>
            <td>${m2 ? m2.value : '-'}</td>
        `;
        row.style.borderBottom = '1px solid #ccc';
        table.appendChild(row);
    });

    container.appendChild(table);
    overlay.appendChild(container);
    document.body.appendChild(overlay);
}


// =================================================================
// üåü –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ñ–æ—Ç–æ
// =================================================================
function showComparePhotos(idBefore, idAfter, numBefore, numAfter) {
    const report1 = state.reports.find(r => r.id === idBefore);
    const report2 = state.reports.find(r => r.id === idAfter);
    if (!report1 || !report2) return;

    const photo1 = (report1.photos || []).find(p => p.number == numBefore);
    const photo2 = (report2.photos || []).find(p => p.number == numAfter);

    const overlay = createElement('div');
    overlay.style.cssText = `
        position: fixed; top:0; left:0; width:100%; height:100%;
        background: rgba(0,0,0,0.9); display:flex; justify-content:center; align-items:center;
        z-index:1000; gap:20px; flex-wrap:wrap;
    `;
    overlay.addEventListener('click', e => { if (e.target === overlay) overlay.remove(); });

    if (photo1 && photo1.url) {
        const img1 = createElement('img');
        img1.src = photo1.url;
        img1.style.maxWidth = '45%';
        img1.style.borderRadius = '8px';
        overlay.appendChild(img1);
    }

    if (photo2 && photo2.url) {
        const img2 = createElement('img');
        img2.src = photo2.url;
        img2.style.maxWidth = '45%';
        img2.style.borderRadius = '8px';
        overlay.appendChild(img2);
    }

    document.body.appendChild(overlay);
}



// üî• –í–ê–ñ–ù–û: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è `renderModeChangeButton` –∏ `deleteReport`.
// –ê –≥–ª–∞–≤–Ω–æ–µ ‚Äî —Ñ—É–Ω–∫—Ü–∏—è `openSupplementsPdfOptionsModal` (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –æ—Ç–≤–µ—Ç–∞).


// =================================================================
// ‚öôÔ∏è –°–õ–£–®–ê–¢–ï–õ–ò FIREBASE (–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è–º–∏)
// =================================================================

function unsubscribeAll() {
    programsUnsubscribe();
    journalUnsubscribe();
    clientsUnsubscribe();
    cyclesUnsubscribe();
    // üî• –ù–û–í–´–ï –û–¢–ü–ò–°–ö–ò
    supplementsUnsubscribe();
    reportsUnsubscribe();
}

function setupDynamicListeners() {
    unsubscribeAll(); // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π

    if (!userId) return;

    // 1. –°–ª—É—à–∞–µ–º –∫–ª–∏–µ–Ω—Ç–æ–≤
    if (state.currentMode === 'personal') {
        clientsUnsubscribe = onSnapshot(getClientsCollection(), (snapshot) => {
            state.clients = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            if (state.currentPage === 'programs' && state.selectedClientId === null) {
                render();
            }
        });
    } else {
        state.clients = [];
    }

    // 2. –°–ª—É—à–∞–µ–º —Ü–∏–∫–ª—ã
    if (state.currentMode) {
        const shouldListenToCycles = state.currentMode === 'own' || state.selectedClientId;

        if (shouldListenToCycles) {
            cyclesUnsubscribe = onSnapshot(getUserCyclesCollection(), (snapshot) => {
                state.cycles = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
                if (state.currentPage === 'programs') {
                    render();
                }
            });
        }
    }

    // 3. –°–ª—É—à–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—ã (–µ—Å–ª–∏ —Ü–∏–∫–ª –≤—ã–±—Ä–∞–Ω)
    if (state.selectedCycleId) {
        programsUnsubscribe = onSnapshot(getUserProgramsCollection(), (snapshot) => {
            state.programs = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            if (state.currentPage === 'programsInCycle' || state.currentPage === 'programDetails' || state.currentPage === 'supplements') {
                render();
            }
        });

        // üî• –ü–ª–∞–Ω –¥–æ–±–∞–≤–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        const supplementDocRef = getSupplementPlanDocRef();
        if (supplementDocRef) {
            supplementsUnsubscribe = onSnapshot(supplementDocRef, (docSnap) => {
                if (docSnap.exists()) {
                    state.supplementPlan = docSnap.data().supplementPlan || { supplements: [], data: [] };
                } else {
                    state.supplementPlan = { supplements: [], data: [] };
                }

                if (state.currentPage === 'supplements') {
                    render();
                }
            });
        }

        // üî• –û—Ç—á—ë—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
        reportsUnsubscribe = onSnapshot(getReportsCollection(), (snapshot) => {
            state.reports = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            if (state.currentPage === 'reports') {
                render();
            }
        });

    } else {
        state.programs = [];
        state.supplementPlan = null;
        state.reports = []; // –ï—Å–ª–∏ —Ü–∏–∫–ª –Ω–µ –≤—ã–±—Ä–∞–Ω, –æ—Ç—á—ë—Ç—ã –ø—É—Å—Ç—ã–µ
    }

    // 4. –°–ª—É—à–∞–µ–º –∂—É—Ä–Ω–∞–ª (–µ—Å–ª–∏ —Ä–µ–∂–∏–º –≤—ã–±—Ä–∞–Ω)
    if (state.currentMode) {
        journalUnsubscribe = onSnapshot(getUserJournalCollection(), (snapshot) => {
            state.journal = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
            if (state.currentPage === 'journal') {
                render();
            }
        });
    }
}

// -----------------------------------------------------------
// —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è
// -----------------------------------------------------------

function openConfirmModal(message, onConfirm) {
    const modal = createElement('div', 'modal-overlay');
    const modalContent = createElement('div', 'modal-content modal-compact');
    modalContent.innerHTML = `
        <p>${message}</p>
        <div class="modal-controls">
            <button class="btn btn-secondary cancel-btn">–ù–µ—Ç</button>
            <button class="btn btn-danger confirm-btn">–î–∞</button>
        </div>
    `;
    modal.append(modalContent);
    document.body.append(modal);

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => modal.classList.add('active'), 50);

    const closeModal = () => {
        modal.classList.remove('active');
        setTimeout(() => modal.remove(), 300);
    };

    modal.querySelector('.cancel-btn').addEventListener('click', closeModal);
    modal.querySelector('.confirm-btn').addEventListener('click', async () => {
        await onConfirm();
        closeModal();
    });
}


// =================================================================
// üîÑ –ì–õ–ê–í–ù–´–ô –†–ï–ù–î–ï–†: –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ –ø–æ–∫–∞–∑–∞—Ç—å (–ò–°–ü–†–ê–í–õ–ï–ù–û)
// =================================================================

function render() {
    const root = document.getElementById('root');
    root.innerHTML = ''; // –û—á–∏—Å—Ç–∫–∞

    // –°–Ω–∞—á–∞–ª–∞ —É–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ –≤–∏–¥–∏–º–æ—Å—Ç—å —ç–∫—Ä–∞–Ω–æ–≤ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ
    toggleAppVisibility(!!userId);

    // –ï—Å–ª–∏ –Ω–µ—Ç userId (–Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω) –∏–ª–∏ —Ä–µ–∂–∏–º –Ω–µ –≤—ã–±—Ä–∞–Ω - –Ω–∏—á–µ–≥–æ –Ω–µ —Ä–µ–Ω–¥–µ—Ä–∏–º –≤ root
    if (!userId || state.currentMode === null) return;

    // üî• –ï–î–ò–ù–´–ô –ë–õ–û–ö –†–ï–ù–î–ï–†–ò–ù–ì–ê
    // –¢–µ–ø–µ—Ä—å —Ä–µ–Ω–¥–µ—Ä–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ root –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç state.currentPage
    if (state.currentPage === 'programs') {
        renderCyclesPage();
    } else if (state.currentPage === 'programsInCycle') {
        renderProgramsInCyclePage();
    } else if (state.currentPage === 'programDetails') {
        renderProgramDetailsPage();
    } else if (state.currentPage === 'journal') {
        renderJournalPage();
    } else if (state.currentPage === 'supplements') {
        renderSupplementsPage();
    } else if (state.currentPage === 'reports') {
        renderReportsPage();
    } else if (state.currentPage === 'cycleReport') { // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ—Ç—á–µ—Ç–∞
        renderCycleReportPage(state.reportHtmlCache); // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è –Ω–∞–ª–∏—á–∏–µ renderCycleReportPage
        document.querySelector('.navigation').style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        return; // –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –Ω–µ –æ–±–Ω–æ–≤–ª—è—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –∫–Ω–æ–ø–∫—É –∏ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    } else if (state.currentPage === 'modeSelect') {
        // –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞ —ç–∫—Ä–∞–Ω–∞ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ (–µ—Å–ª–∏ –æ–Ω–∞ —Ç—É—Ç)
        document.querySelector('.navigation').style.display = 'none'; // –°–∫—Ä—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é –Ω–∞ —ç—Ç–æ–º —ç–∫—Ä–∞–Ω–µ
        return;
    }

    // –ï—Å–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ 'cycleReport' –∏ –Ω–µ 'modeSelect', –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
    document.querySelector('.navigation').style.display = 'flex';


    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –≤ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    document.querySelectorAll('.nav-btn').forEach(btn => {
        btn.classList.remove('active');
    });

    // –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏
    const activeNavButtonId = {
        'programs': 'programs-btn',
        'programsInCycle': 'programs-btn',
        'programDetails': 'programs-btn',
        'journal': 'journal-btn',
        'supplements': 'supplements-btn',
        'reports': 'reports-btn'
    }[state.currentPage];

    if (activeNavButtonId) {
        document.getElementById(activeNavButtonId)?.classList.add('active');
    }
}

// =================================================================
// üîë –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø
// =================================================================
// ... (–ö–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

// üî• –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏ –í—Ö–æ–¥/–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
let isLoginMode = true;
const authToggleBtn = document.getElementById('auth-toggle-btn');
const authLoginBtn = document.getElementById('auth-login-btn');
if (authToggleBtn && authLoginBtn) {
    authToggleBtn.addEventListener('click', () => {
        isLoginMode = !isLoginMode;
        authLoginBtn.innerText = isLoginMode ? '–í–æ–π—Ç–∏' : '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è';
        authToggleBtn.innerText = isLoginMode ? '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è' : '–í–æ–π—Ç–∏';
        document.querySelector('.auth-box h3').innerText = isLoginMode ? '–í—Ö–æ–¥ –≤ –î–Ω–µ–≤–Ω–∏–∫' : '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è';
    });

    authLoginBtn.addEventListener('click', async () => {
        const email = document.getElementById('auth-email').value;
        const password = document.getElementById('auth-password').value;
        try {
            if (isLoginMode) {
                await signInWithEmailAndPassword(auth, email, password);
                showToast('–í—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
            } else {
                await createUserWithEmailAndPassword(auth, email, password);
                showToast('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –í—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥.');
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏:", error);
            showToast('–û—à–∏–±–∫–∞: ' + (error.message.includes('auth/invalid-credential') ? '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å.' : error.message));
        }
    });
}


// =================================================================
// üñ±Ô∏è –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–õ–ò–ö–û–í (–ù–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –∏ –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞)
// =================================================================

// üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–ü–†–û–ì–†–ê–ú–ú–´"
document.getElementById('programs-btn')?.addEventListener('click', () => {
    if (state.currentMode) {
        if (state.currentPage !== 'programs' && state.currentPage !== 'programsInCycle' && state.currentPage !== 'programDetails') {
            // –ï—Å–ª–∏ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –¥—Ä—É–≥–∏—Ö –≤–∫–ª–∞–¥–æ–∫, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –≤ previousPage
            state.previousPage = state.currentPage; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ —Å–±—Ä–æ—Å–æ–º
            state.currentPage = 'programs';
        } else {
            // –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ —Ä–∞–∑–¥–µ–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º, –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ø–∏—Å–∫–∞–º —Ü–∏–∫–ª–æ–≤/–∫–ª–∏–µ–Ω—Ç–æ–≤
            state.currentPage = 'programs';
            state.selectedProgramIdForDetails = null; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏
        }
        render();
    }
});

// üî• –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–î–ù–ï–í–ù–ò–ö"
document.getElementById('journal-btn')?.addEventListener('click', () => {
    if (state.currentMode) {
        if (state.currentPage !== 'journal') {
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º –≤ –¥–Ω–µ–≤–Ω–∏–∫
            state.previousPage = state.currentPage;
            state.currentPage = 'journal';
        } else {
            // –ï—Å–ª–∏ –º—ã —É–∂–µ –≤ –¥–Ω–µ–≤–Ω–∏–∫–µ, –ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞ previousPage
            state.currentPage = state.previousPage;
        }
        render();
    }
});

// üî• –î–û–ë–ê–í–õ–ï–ù–û: –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–ë–ê–î–´" - –ò–°–ü–†–ê–í–õ–ï–ù
document.getElementById('supplements-btn')?.addEventListener('click', () => {
    if (state.currentMode) {
        if (state.currentPage !== 'supplements') {
            state.previousPage = state.currentPage; // –°–æ—Ö—Ä–∞–Ω—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–∏
            state.currentPage = 'supplements';
        } else {
            state.currentPage = state.previousPage; // –ü–æ–≤—Ç–æ—Ä–Ω–æ–µ –Ω–∞–∂–∞—Ç–∏–µ - –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â—É—é
        }
        render();
    }
});

// üî• –î–û–ë–ê–í–õ–ï–ù–û: –û–ë–†–ê–ë–û–¢–ß–ò–ö –î–õ–Ø –ö–ù–û–ü–ö–ò "–û–¢–ß–ï–¢–´"
document.getElementById('reports-btn')?.addEventListener('click', () => {
    if (state.currentMode) {
        if (state.currentPage !== 'reports') {
            state.previousPage = state.currentPage;
            state.currentPage = 'reports';
        } else {
            state.currentPage = state.previousPage;
        }
        render();
    }
});

// üî• –ù–û–í–´–ï –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –≠–ö–†–ê–ù–ê –í–´–ë–û–†–ê –†–ï–ñ–ò–ú–ê
// ... (–ö–æ–¥ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
document.getElementById('select-own-mode')?.addEventListener('click', () => {
    state.currentMode = 'own';
    state.currentPage = 'programs';
    setupDynamicListeners();
    render();
});

document.getElementById('select-personal-mode')?.addEventListener('click', () => {
    state.currentMode = 'personal';
    state.currentPage = 'programs';
    state.selectedClientId = null; // –°–±—Ä–æ—Å –∫–ª–∏–µ–Ω—Ç–∞
    setupDynamicListeners();
    render();
});

// üî• –ö–Ω–æ–ø–∫–∞ –í–´–•–û–î–ê –Ω–∞ —ç–∫—Ä–∞–Ω–µ –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
document.getElementById('mode-logout-btn')?.addEventListener('click', async () => {
    try {
        await signOut(auth);
        state.currentMode = null;
        showToast('–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã.');
    } catch (error) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:", error);
        showToast('–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ.');
    }
});


// =================================================================
// üöÄ –ì–õ–ê–í–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê (–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)
// =================================================================
// ... (–ö–æ–¥ onAuthStateChanged –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

onAuthStateChanged(auth, (user) => {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç —Å—Ç–∞—Ä—ã—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∏–∑–º–µ–Ω–µ–Ω–∏–µ–º userId
    unsubscribeAll();

    if (user) {
        userId = user.uid;
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–æ–ª—å–∫–æ —á—Ç–æ –≤–æ—à–µ–ª, —Ä–µ–∂–∏–º –µ—â–µ –Ω–µ –≤—ã–±—Ä–∞–Ω
        if (state.currentMode === null) {
            state.currentPage = 'modeSelect';
            toggleAppVisibility(true); // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –≤—ã–±–æ—Ä–∞ —Ä–µ–∂–∏–º–∞
        } else {
            // –ï—Å–ª–∏ —Ä–µ–∂–∏–º —É–∂–µ –±—ã–ª –≤—ã–±—Ä–∞–Ω (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã),
            // –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –∏ —Ä–µ–Ω–¥–µ—Ä–∏–º
            setupDynamicListeners();
        }
    } else {
        userId = null;
        state.currentMode = null;
        state.selectedClientId = null;
        state.currentPage = 'auth';
        toggleAppVisibility(false); // –ü–æ–∫–∞–∑–∞—Ç—å —ç–∫—Ä–∞–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    }


    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω—ã–π —Ä–µ–Ω–¥–µ—Ä
    render();
});
